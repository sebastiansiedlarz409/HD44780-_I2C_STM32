
LCD1602_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d08  08004d08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d10  08004d10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08004d88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004d88  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125d7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e0  00000000  00000000  00032677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00035788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215dd  00000000  00000000  000363d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff86  00000000  00000000  000579ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3bf7  00000000  00000000  00067933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b52a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d9c  00000000  00000000  0012b580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bf0 	.word	0x08004bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004bf0 	.word	0x08004bf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LCD_Begin>:
#include <stdint.h>

//INSERT MCU STDLIB HERE
#include "stm32l4xx_hal.h"

HAL_StatusTypeDef LCD_Begin(I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t rows, uint8_t columns, uint8_t blink, uint8_t backlight){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4603      	mov	r3, r0
 8000578:	70fb      	strb	r3, [r7, #3]
 800057a:	460b      	mov	r3, r1
 800057c:	70bb      	strb	r3, [r7, #2]
 800057e:	4613      	mov	r3, r2
 8000580:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]

	lcd_hi2c = hi2c;
 8000586:	4a2d      	ldr	r2, [pc, #180]	; (800063c <LCD_Begin+0xd4>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6013      	str	r3, [r2, #0]
	lcd_address = address<<1;
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <LCD_Begin+0xd8>)
 8000594:	701a      	strb	r2, [r3, #0]
	lcd_rows = rows;
 8000596:	4a2b      	ldr	r2, [pc, #172]	; (8000644 <LCD_Begin+0xdc>)
 8000598:	78bb      	ldrb	r3, [r7, #2]
 800059a:	7013      	strb	r3, [r2, #0]
	lcd_columns = columns;
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <LCD_Begin+0xe0>)
 800059e:	787b      	ldrb	r3, [r7, #1]
 80005a0:	7013      	strb	r3, [r2, #0]
	lcd_data = 0x00;
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <LCD_Begin+0xe4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]

	LCD_BackLight(backlight);
 80005a8:	7f3b      	ldrb	r3, [r7, #28]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f89e 	bl	80006ec <LCD_BackLight>
	LCD_SendCmd(0);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f8e3 	bl	800077c <LCD_SendCmd>

	//init screen
	if(rows == 2){
 80005b6:	78bb      	ldrb	r3, [r7, #2]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d108      	bne.n	80005ce <LCD_Begin+0x66>
		status |= LCD_SendCmd(0x28); //4bits 2 rows
 80005bc:	2028      	movs	r0, #40	; 0x28
 80005be:	f000 f8dd 	bl	800077c <LCD_SendCmd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e00d      	b.n	80005ea <LCD_Begin+0x82>
	}
	else if(rows == 1){
 80005ce:	78bb      	ldrb	r3, [r7, #2]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d108      	bne.n	80005e6 <LCD_Begin+0x7e>
		status |= LCD_SendCmd(0x20); //4bits 1 row
 80005d4:	2020      	movs	r0, #32
 80005d6:	f000 f8d1 	bl	800077c <LCD_SendCmd>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e001      	b.n	80005ea <LCD_Begin+0x82>
	}
	else{
		return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e024      	b.n	8000634 <LCD_Begin+0xcc>
	}

	//move to first position in first row
	if(blink){
 80005ea:	7e3b      	ldrb	r3, [r7, #24]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <LCD_Begin+0x9a>
		status |= LCD_SendCmd(TURNON_BLINK);
 80005f0:	200f      	movs	r0, #15
 80005f2:	f000 f8c3 	bl	800077c <LCD_SendCmd>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e007      	b.n	8000612 <LCD_Begin+0xaa>
	}
	else{
		status |= LCD_SendCmd(TURNON_NOBLINK);
 8000602:	200e      	movs	r0, #14
 8000604:	f000 f8ba 	bl	800077c <LCD_SendCmd>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4313      	orrs	r3, r2
 8000610:	73fb      	strb	r3, [r7, #15]
	}
	//status |= LCD_SendCmd(FIRST_ROW_START);

	status |= LCD_SendCmd(0x01);
 8000612:	2001      	movs	r0, #1
 8000614:	f000 f8b2 	bl	800077c <LCD_SendCmd>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	4313      	orrs	r3, r2
 8000620:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SendCmd(0x02);
 8000622:	2002      	movs	r0, #2
 8000624:	f000 f8aa 	bl	800077c <LCD_SendCmd>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4313      	orrs	r3, r2
 8000630:	73fb      	strb	r3, [r7, #15]

	return status;
 8000632:	7bfb      	ldrb	r3, [r7, #15]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000009c 	.word	0x2000009c
 8000640:	200000a1 	.word	0x200000a1
 8000644:	20000098 	.word	0x20000098
 8000648:	200000a0 	.word	0x200000a0
 800064c:	20000099 	.word	0x20000099

08000650 <LCD_Write>:

HAL_StatusTypeDef LCD_Write(){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af02      	add	r7, sp, #8
	return HAL_I2C_Master_Transmit(lcd_hi2c, lcd_address, &lcd_data, 1, 100);
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <LCD_Write+0x24>)
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <LCD_Write+0x28>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b299      	uxth	r1, r3
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <LCD_Write+0x2c>)
 8000668:	f001 f8fe 	bl	8001868 <HAL_I2C_Master_Transmit>
 800066c:	4603      	mov	r3, r0
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000009c 	.word	0x2000009c
 8000678:	200000a1 	.word	0x200000a1
 800067c:	20000099 	.word	0x20000099

08000680 <LCD_SetPin>:

HAL_StatusTypeDef LCD_SetPin(uint8_t pin, uint8_t state){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	if(pin>7) return HAL_ERROR;
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b07      	cmp	r3, #7
 8000694:	d901      	bls.n	800069a <LCD_SetPin+0x1a>
 8000696:	2301      	movs	r3, #1
 8000698:	e020      	b.n	80006dc <LCD_SetPin+0x5c>

	if(state > 0)
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00d      	beq.n	80006bc <LCD_SetPin+0x3c>
		lcd_data |= (1<<pin);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2201      	movs	r2, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	b25a      	sxtb	r2, r3
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <LCD_SetPin+0x68>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b25b      	sxtb	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <LCD_SetPin+0x68>)
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e00e      	b.n	80006da <LCD_SetPin+0x5a>
	else
		lcd_data &= ~(1<<pin);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	b25a      	sxtb	r2, r3
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <LCD_SetPin+0x68>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	4013      	ands	r3, r2
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <LCD_SetPin+0x68>)
 80006d8:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000099 	.word	0x20000099

080006ec <LCD_BackLight>:

HAL_StatusTypeDef LCD_BackLight(uint8_t on){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	if(on){
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d005      	beq.n	8000708 <LCD_BackLight+0x1c>
		return LCD_SetPin(BL, 1);
 80006fc:	2101      	movs	r1, #1
 80006fe:	2003      	movs	r0, #3
 8000700:	f7ff ffbe 	bl	8000680 <LCD_SetPin>
 8000704:	4603      	mov	r3, r0
 8000706:	e004      	b.n	8000712 <LCD_BackLight+0x26>
	}
	else{
		return LCD_SetPin(BL, 0);
 8000708:	2100      	movs	r1, #0
 800070a:	2003      	movs	r0, #3
 800070c:	f7ff ffb8 	bl	8000680 <LCD_SetPin>
 8000710:	4603      	mov	r3, r0
	}
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <LCD_PulseEnable>:

HAL_StatusTypeDef LCD_PulseEnable(){
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000720:	2300      	movs	r3, #0
 8000722:	71fb      	strb	r3, [r7, #7]

	status |= LCD_SetPin(EN, EN_ENABLE);
 8000724:	2101      	movs	r1, #1
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff ffaa 	bl	8000680 <LCD_SetPin>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4313      	orrs	r3, r2
 8000734:	71fb      	strb	r3, [r7, #7]
	status |= LCD_Write();
 8000736:	f7ff ff8b 	bl	8000650 <LCD_Write>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4313      	orrs	r3, r2
 8000742:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fd73 	bl	8001230 <HAL_Delay>
	status |= LCD_SetPin(EN, EN_DISABLE);
 800074a:	2100      	movs	r1, #0
 800074c:	2002      	movs	r0, #2
 800074e:	f7ff ff97 	bl	8000680 <LCD_SetPin>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4313      	orrs	r3, r2
 800075a:	71fb      	strb	r3, [r7, #7]
	status |= LCD_Write();
 800075c:	f7ff ff78 	bl	8000650 <LCD_Write>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4313      	orrs	r3, r2
 8000768:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fd60 	bl	8001230 <HAL_Delay>

	return status;
 8000770:	79fb      	ldrb	r3, [r7, #7]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <LCD_SendCmd>:

HAL_StatusTypeDef LCD_SendCmd(uint8_t cmd){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]

	uint8_t hn = (cmd>>4)&0x0F;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	091b      	lsrs	r3, r3, #4
 800078e:	73bb      	strb	r3, [r7, #14]
	uint8_t ln = cmd&0x0F;
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	737b      	strb	r3, [r7, #13]

	status |= LCD_SetPin(RW, RW_WRITE);
 8000798:	2100      	movs	r1, #0
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff ff70 	bl	8000680 <LCD_SetPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(RS, RS_CMD);
 80007aa:	2100      	movs	r1, #0
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ff67 	bl	8000680 <LCD_SetPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	461a      	mov	r2, r3
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	73fb      	strb	r3, [r7, #15]

	lcd_data &= 0x0F; //clear data bits
 80007bc:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <LCD_SendCmd+0x154>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <LCD_SendCmd+0x154>)
 80007c8:	701a      	strb	r2, [r3, #0]
	status |= LCD_SetPin(D4, hn&0b0001);
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	2004      	movs	r0, #4
 80007d6:	f7ff ff53 	bl	8000680 <LCD_SetPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D5, hn&0b0010);
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	2005      	movs	r0, #5
 80007f0:	f7ff ff46 	bl	8000680 <LCD_SetPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D6, hn&0b0100);
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4619      	mov	r1, r3
 8000808:	2006      	movs	r0, #6
 800080a:	f7ff ff39 	bl	8000680 <LCD_SetPin>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	4313      	orrs	r3, r2
 8000816:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D7, hn&0b1000);
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	2007      	movs	r0, #7
 8000824:	f7ff ff2c 	bl	8000680 <LCD_SetPin>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4313      	orrs	r3, r2
 8000830:	73fb      	strb	r3, [r7, #15]
	status |= LCD_PulseEnable();
 8000832:	f7ff ff72 	bl	800071a <LCD_PulseEnable>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	4313      	orrs	r3, r2
 800083e:	73fb      	strb	r3, [r7, #15]

	lcd_data &= 0x0F; //clear data bits
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <LCD_SendCmd+0x154>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	f003 030f 	and.w	r3, r3, #15
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <LCD_SendCmd+0x154>)
 800084c:	701a      	strb	r2, [r3, #0]
	status |= LCD_SetPin(D4, ln&0b0001);
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	2004      	movs	r0, #4
 800085a:	f7ff ff11 	bl	8000680 <LCD_SetPin>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	4313      	orrs	r3, r2
 8000866:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D5, ln&0b0010);
 8000868:	7b7b      	ldrb	r3, [r7, #13]
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	2005      	movs	r0, #5
 8000874:	f7ff ff04 	bl	8000680 <LCD_SetPin>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	4313      	orrs	r3, r2
 8000880:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D6, ln&0b0100);
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	2006      	movs	r0, #6
 800088e:	f7ff fef7 	bl	8000680 <LCD_SetPin>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	4313      	orrs	r3, r2
 800089a:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D7, ln&0b1000);
 800089c:	7b7b      	ldrb	r3, [r7, #13]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	2007      	movs	r0, #7
 80008a8:	f7ff feea 	bl	8000680 <LCD_SetPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	73fb      	strb	r3, [r7, #15]
	status |= LCD_PulseEnable();
 80008b6:	f7ff ff30 	bl	800071a <LCD_PulseEnable>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	73fb      	strb	r3, [r7, #15]

	return status;
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000099 	.word	0x20000099

080008d4 <LCD_SendData>:

HAL_StatusTypeDef LCD_SendData(uint8_t data){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

	uint8_t hn = (data>>4)&0x0F;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	091b      	lsrs	r3, r3, #4
 80008e6:	73bb      	strb	r3, [r7, #14]
	uint8_t ln = data&0x0F;
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	737b      	strb	r3, [r7, #13]

	status |= LCD_SetPin(RW, RW_WRITE);
 80008f0:	2100      	movs	r1, #0
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fec4 	bl	8000680 <LCD_SetPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	4313      	orrs	r3, r2
 8000900:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(RS, RS_DATA);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff febb 	bl	8000680 <LCD_SetPin>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	4313      	orrs	r3, r2
 8000912:	73fb      	strb	r3, [r7, #15]

	lcd_data &= 0x0F; //clear data bits
 8000914:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <LCD_SendData+0x154>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f003 030f 	and.w	r3, r3, #15
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <LCD_SendData+0x154>)
 8000920:	701a      	strb	r2, [r3, #0]
	status |= LCD_SetPin(D4, hn&0b0001);
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4619      	mov	r1, r3
 800092c:	2004      	movs	r0, #4
 800092e:	f7ff fea7 	bl	8000680 <LCD_SetPin>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	4313      	orrs	r3, r2
 800093a:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D5, hn&0b0010);
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	2005      	movs	r0, #5
 8000948:	f7ff fe9a 	bl	8000680 <LCD_SetPin>
 800094c:	4603      	mov	r3, r0
 800094e:	461a      	mov	r2, r3
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	4313      	orrs	r3, r2
 8000954:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D6, hn&0b0100);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	2006      	movs	r0, #6
 8000962:	f7ff fe8d 	bl	8000680 <LCD_SetPin>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4313      	orrs	r3, r2
 800096e:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D7, hn&0b1000);
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	2007      	movs	r0, #7
 800097c:	f7ff fe80 	bl	8000680 <LCD_SetPin>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	4313      	orrs	r3, r2
 8000988:	73fb      	strb	r3, [r7, #15]
	status |= LCD_PulseEnable();
 800098a:	f7ff fec6 	bl	800071a <LCD_PulseEnable>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	4313      	orrs	r3, r2
 8000996:	73fb      	strb	r3, [r7, #15]

	lcd_data &= 0x0F; //clear data bits
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <LCD_SendData+0x154>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	f003 030f 	and.w	r3, r3, #15
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <LCD_SendData+0x154>)
 80009a4:	701a      	strb	r2, [r3, #0]
	status |= LCD_SetPin(D4, ln&0b0001);
 80009a6:	7b7b      	ldrb	r3, [r7, #13]
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4619      	mov	r1, r3
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff fe65 	bl	8000680 <LCD_SetPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	461a      	mov	r2, r3
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4313      	orrs	r3, r2
 80009be:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D5, ln&0b0010);
 80009c0:	7b7b      	ldrb	r3, [r7, #13]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	2005      	movs	r0, #5
 80009cc:	f7ff fe58 	bl	8000680 <LCD_SetPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D6, ln&0b0100);
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	2006      	movs	r0, #6
 80009e6:	f7ff fe4b 	bl	8000680 <LCD_SetPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	73fb      	strb	r3, [r7, #15]
	status |= LCD_SetPin(D7, ln&0b1000);
 80009f4:	7b7b      	ldrb	r3, [r7, #13]
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	2007      	movs	r0, #7
 8000a00:	f7ff fe3e 	bl	8000680 <LCD_SetPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	73fb      	strb	r3, [r7, #15]
	status |= LCD_PulseEnable();
 8000a0e:	f7ff fe84 	bl	800071a <LCD_PulseEnable>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	73fb      	strb	r3, [r7, #15]

	return status;
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000099 	.word	0x20000099

08000a2c <LCD_SendCharacter>:

HAL_StatusTypeDef LCD_SendCharacter(uint8_t chr){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	return LCD_SendData(chr);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff4b 	bl	80008d4 <LCD_SendData>
 8000a3e:	4603      	mov	r3, r0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <LCD_SendString>:

HAL_StatusTypeDef LCD_SendString(const char* str){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
	while(*str){
 8000a54:	e00c      	b.n	8000a70 <LCD_SendString+0x28>
		status |= LCD_SendCharacter((uint8_t)*str);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ffe6 	bl	8000a2c <LCD_SendCharacter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	73fb      	strb	r3, [r7, #15]
		str++;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
	while(*str){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1ee      	bne.n	8000a56 <LCD_SendString+0xe>
	}
	return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 8000a8c:	1d39      	adds	r1, r7, #4
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	2201      	movs	r2, #1
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <__io_putchar+0x20>)
 8000a96:	f002 fc5f 	bl	8003358 <HAL_UART_Transmit>
	return ch;
 8000a9a:	687b      	ldr	r3, [r7, #4]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000f8 	.word	0x200000f8

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fb4a 	bl	8001146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f837 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 f907 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aba:	f000 f8d5 	bl	8000c68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000abe:	f000 f893 	bl	8000be8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("Device Started!\r\n");
 8000ac2:	4813      	ldr	r0, [pc, #76]	; (8000b10 <main+0x68>)
 8000ac4:	f003 f94e 	bl	8003d64 <puts>
  LCD_Begin(&hi2c1, 0x27, 2, 16, 1, 1);
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	2301      	movs	r3, #1
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	2127      	movs	r1, #39	; 0x27
 8000ad6:	480f      	ldr	r0, [pc, #60]	; (8000b14 <main+0x6c>)
 8000ad8:	f7ff fd46 	bl	8000568 <LCD_Begin>
  LCD_SendCharacter('!');
 8000adc:	2021      	movs	r0, #33	; 0x21
 8000ade:	f7ff ffa5 	bl	8000a2c <LCD_SendCharacter>
  LCD_SendCharacter('#');
 8000ae2:	2023      	movs	r0, #35	; 0x23
 8000ae4:	f7ff ffa2 	bl	8000a2c <LCD_SendCharacter>
  LCD_SendCharacter('(');
 8000ae8:	2028      	movs	r0, #40	; 0x28
 8000aea:	f7ff ff9f 	bl	8000a2c <LCD_SendCharacter>
  LCD_SendCharacter(')');
 8000aee:	2029      	movs	r0, #41	; 0x29
 8000af0:	f7ff ff9c 	bl	8000a2c <LCD_SendCharacter>
  LCD_SendString("ALA");
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <main+0x70>)
 8000af6:	f7ff ffa7 	bl	8000a48 <LCD_SendString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("%X\r\n", lcd_data);
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <main+0x74>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <main+0x78>)
 8000b02:	f003 f8a9 	bl	8003c58 <iprintf>
	HAL_Delay(2000);
 8000b06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0a:	f000 fb91 	bl	8001230 <HAL_Delay>
	printf("%X\r\n", lcd_data);
 8000b0e:	e7f4      	b.n	8000afa <main+0x52>
 8000b10:	08004c08 	.word	0x08004c08
 8000b14:	200000a4 	.word	0x200000a4
 8000b18:	08004c1c 	.word	0x08004c1c
 8000b1c:	20000099 	.word	0x20000099
 8000b20:	08004c20 	.word	0x08004c20

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2244      	movs	r2, #68	; 0x44
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 f888 	bl	8003c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b4a:	f001 fa35 	bl	8001fb8 <HAL_PWREx_ControlVoltageScaling>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b54:	f000 f902 	bl	8000d5c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b58:	f001 fa10 	bl	8001f7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <SystemClock_Config+0xc0>)
 8000b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <SystemClock_Config+0xc0>)
 8000b64:	f023 0318 	bic.w	r3, r3, #24
 8000b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b7c:	2360      	movs	r3, #96	; 0x60
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2302      	movs	r3, #2
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b84:	2301      	movs	r3, #1
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b90:	2307      	movs	r3, #7
 8000b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fa5f 	bl	8002064 <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f8d6 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fe5d 	bl	8002888 <HAL_RCC_ClockConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bd4:	f000 f8c2 	bl	8000d5c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bd8:	f002 fa6e 	bl	80030b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bdc:	bf00      	nop
 8000bde:	3758      	adds	r7, #88	; 0x58
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_I2C1_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <MX_I2C1_Init+0x7c>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c24:	f000 fd90 	bl	8001748 <HAL_I2C_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c2e:	f000 f895 	bl	8000d5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c36:	f001 f909 	bl	8001e4c <HAL_I2CEx_ConfigAnalogFilter>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 f88c 	bl	8000d5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_I2C1_Init+0x74>)
 8000c48:	f001 f94b 	bl	8001ee2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c52:	f000 f883 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000a4 	.word	0x200000a4
 8000c60:	40005400 	.word	0x40005400
 8000c64:	00707cbb 	.word	0x00707cbb

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_USART2_UART_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000cac:	f002 fb06 	bl	80032bc <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f851 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000f8 	.word	0x200000f8
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_GPIO_Init+0x8c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2108      	movs	r1, #8
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000d2c:	f000 fcf4 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d30:	2308      	movs	r3, #8
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_GPIO_Init+0x90>)
 8000d48:	f000 fb7c 	bl	8001444 <HAL_GPIO_Init>

}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_MspInit+0x44>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_MspInit+0x44>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6593      	str	r3, [r2, #88]	; 0x58
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09e      	sub	sp, #120	; 0x78
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2254      	movs	r2, #84	; 0x54
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 ff39 	bl	8003c48 <memset>
  if(hi2c->Instance==I2C1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <HAL_I2C_MspInit+0xa8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d137      	bne.n	8000e50 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 ff6f 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000df8:	f7ff ffb0 	bl	8000d5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_I2C_MspInit+0xac>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <HAL_I2C_MspInit+0xac>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_I2C_MspInit+0xac>)
 8000e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e26:	2304      	movs	r3, #4
 8000e28:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 fb06 	bl	8001444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_I2C_MspInit+0xac>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_I2C_MspInit+0xac>)
 8000e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e42:	6593      	str	r3, [r2, #88]	; 0x58
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_I2C_MspInit+0xac>)
 8000e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3778      	adds	r7, #120	; 0x78
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09e      	sub	sp, #120	; 0x78
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2254      	movs	r2, #84	; 0x54
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fee1 	bl	8003c48 <memset>
  if(huart->Instance==USART2)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <HAL_UART_MspInit+0xcc>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d148      	bne.n	8000f22 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 ff17 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f7ff ff58 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_UART_MspInit+0xd0>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_UART_MspInit+0xd0>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_UART_MspInit+0xd0>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_UART_MspInit+0xd0>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_UART_MspInit+0xd0>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_UART_MspInit+0xd0>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000edc:	2304      	movs	r3, #4
 8000ede:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 faa3 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f10:	2303      	movs	r3, #3
 8000f12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f000 fa91 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3778      	adds	r7, #120	; 0x78
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40021000 	.word	0x40021000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f936 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e00a      	b.n	8000fb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f9a:	f3af 8000 	nop.w
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	60ba      	str	r2, [r7, #8]
 8000fa6:	b2ca      	uxtb	r2, r1
 8000fa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf0      	blt.n	8000f9a <_read+0x12>
	}

return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e009      	b.n	8000fe8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	60ba      	str	r2, [r7, #8]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fd51 	bl	8000a84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf1      	blt.n	8000fd4 <_write+0x12>
	}
	return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:

int _close(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001022:	605a      	str	r2, [r3, #4]
	return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_isatty>:

int _isatty(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return 1;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f002 fdae 	bl	8003bf4 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20010000 	.word	0x20010000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	20000190 	.word	0x20000190

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f8:	f7ff ffea 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopForever+0xe>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001122:	f002 fd6d 	bl	8003c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fcbf 	bl	8000aa8 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001138:	08004d18 	.word	0x08004d18
  ldr r2, =_sbss
 800113c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001140:	20000190 	.word	0x20000190

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>

08001146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f943 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f80e 	bl	8001178 <HAL_InitTick>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e001      	b.n	800116c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001168:	f7ff fdfe 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116c:	79fb      	ldrb	r3, [r7, #7]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_InitTick+0x6c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d023      	beq.n	80011d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_InitTick+0x70>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f941 	bl	800142a <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10f      	bne.n	80011ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d809      	bhi.n	80011c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 f919 	bl	80013f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_InitTick+0x74>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e007      	b.n	80011d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e004      	b.n	80011d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e001      	b.n	80011d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	2000017c 	.word	0x2000017c

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000017c 	.word	0x2000017c

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff47 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5c 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb0 	bl	8001398 <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e148      	b.n	80016e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 813a 	beq.w	80016e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <HAL_GPIO_Init+0x40>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d017      	beq.n	8001522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0203 	and.w	r2, r3, #3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8094 	beq.w	80016e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x2c0>)
 80015ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015bc:	4a51      	ldr	r2, [pc, #324]	; (8001704 <HAL_GPIO_Init+0x2c0>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6613      	str	r3, [r2, #96]	; 0x60
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_GPIO_Init+0x2c0>)
 80015c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d0:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015fa:	d00d      	beq.n	8001618 <HAL_GPIO_Init+0x1d4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a43      	ldr	r2, [pc, #268]	; (800170c <HAL_GPIO_Init+0x2c8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d007      	beq.n	8001614 <HAL_GPIO_Init+0x1d0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a42      	ldr	r2, [pc, #264]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_GPIO_Init+0x1cc>
 800160c:	2302      	movs	r3, #2
 800160e:	e004      	b.n	800161a <HAL_GPIO_Init+0x1d6>
 8001610:	2307      	movs	r3, #7
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x1d6>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_GPIO_Init+0x1d6>
 8001618:	2300      	movs	r3, #0
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	f002 0203 	and.w	r2, r2, #3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4093      	lsls	r3, r2
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800162a:	4937      	ldr	r1, [pc, #220]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800165c:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001686:	4a23      	ldr	r2, [pc, #140]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b0:	4a18      	ldr	r2, [pc, #96]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f47f aeaf 	bne.w	8001454 <HAL_GPIO_Init+0x10>
  }
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000
 800170c:	48000400 	.word	0x48000400
 8001710:	48000800 	.word	0x48000800
 8001714:	40010400 	.word	0x40010400

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001734:	e002      	b.n	800173c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e081      	b.n	800185e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fb1e 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0201 	bic.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001798:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	e006      	b.n	80017d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d104      	bne.n	80017e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69d9      	ldr	r1, [r3, #28]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	461a      	mov	r2, r3
 8001874:	460b      	mov	r3, r1
 8001876:	817b      	strh	r3, [r7, #10]
 8001878:	4613      	mov	r3, r2
 800187a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b20      	cmp	r3, #32
 8001886:	f040 80da 	bne.w	8001a3e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x30>
 8001894:	2302      	movs	r3, #2
 8001896:	e0d3      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a0:	f7ff fcba 	bl	8001218 <HAL_GetTick>
 80018a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2319      	movs	r3, #25
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f8f0 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0be      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2221      	movs	r2, #33	; 0x21
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2210      	movs	r2, #16
 80018ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	893a      	ldrh	r2, [r7, #8]
 80018e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2bff      	cmp	r3, #255	; 0xff
 80018f2:	d90e      	bls.n	8001912 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	8979      	ldrh	r1, [r7, #10]
 8001902:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_I2C_Master_Transmit+0x1e0>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fa6c 	bl	8001de8 <I2C_TransferConfig>
 8001910:	e06c      	b.n	80019ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	b2da      	uxtb	r2, r3
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_I2C_Master_Transmit+0x1e0>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fa5b 	bl	8001de8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001932:	e05b      	b.n	80019ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f8ed 	bl	8001b18 <I2C_WaitOnTXISFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e07b      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d034      	beq.n	80019ec <HAL_I2C_Master_Transmit+0x184>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	d130      	bne.n	80019ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f87f 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e04d      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	d90e      	bls.n	80019cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	8979      	ldrh	r1, [r7, #10]
 80019bc:	2300      	movs	r3, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fa0f 	bl	8001de8 <I2C_TransferConfig>
 80019ca:	e00f      	b.n	80019ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	8979      	ldrh	r1, [r7, #10]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f9fe 	bl	8001de8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d19e      	bne.n	8001934 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6a39      	ldr	r1, [r7, #32]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f8cc 	bl	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e01a      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_I2C_Master_Transmit+0x1e4>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
  }
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	80002000 	.word	0x80002000
 8001a4c:	fe00e800 	.word	0xfe00e800

08001a50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d103      	bne.n	8001a6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d007      	beq.n	8001a8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	619a      	str	r2, [r3, #24]
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa8:	e022      	b.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d01e      	beq.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff fbb1 	bl	8001218 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d113      	bne.n	8001af0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0220 	orr.w	r2, r3, #32
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e00f      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4013      	ands	r3, r2
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d0cd      	beq.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b24:	e02c      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f870 	bl	8001c10 <I2C_IsErrorOccurred>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e02a      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d01e      	beq.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b42:	f7ff fb69 	bl	8001218 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d302      	bcc.n	8001b58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d113      	bne.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e007      	b.n	8001b90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d1cb      	bne.n	8001b26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba4:	e028      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f830 	bl	8001c10 <I2C_IsErrorOccurred>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e026      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bba:	f7ff fb2d 	bl	8001218 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d302      	bcc.n	8001bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d113      	bne.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e007      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d1cf      	bne.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d075      	beq.n	8001d28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2210      	movs	r2, #16
 8001c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c44:	e056      	b.n	8001cf4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d052      	beq.n	8001cf4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7ff fae3 	bl	8001218 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_IsErrorOccurred+0x54>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d147      	bne.n	8001cf4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c86:	d12e      	bne.n	8001ce6 <I2C_IsErrorOccurred+0xd6>
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c8e:	d02a      	beq.n	8001ce6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d027      	beq.n	8001ce6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ca6:	f7ff fab7 	bl	8001218 <HAL_GetTick>
 8001caa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cac:	e01b      	b.n	8001ce6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cae:	f7ff fab3 	bl	8001218 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b19      	cmp	r3, #25
 8001cba:	d914      	bls.n	8001ce6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d1dc      	bne.n	8001cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d003      	beq.n	8001d0a <I2C_IsErrorOccurred+0xfa>
 8001d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d09d      	beq.n	8001c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2220      	movs	r2, #32
 8001d18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01c      	beq.n	8001dd8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fe56 	bl	8001a50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <I2C_IsErrorOccurred+0x1d4>)
 8001db0:	400b      	ands	r3, r1
 8001db2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	fe00e800 	.word	0xfe00e800

08001de8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	817b      	strh	r3, [r7, #10]
 8001df6:	4613      	mov	r3, r2
 8001df8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e00:	7a7b      	ldrb	r3, [r7, #9]
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	0d5b      	lsrs	r3, r3, #21
 8001e22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <I2C_TransferConfig+0x60>)
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	ea02 0103 	and.w	r1, r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	03ff63ff 	.word	0x03ff63ff

08001e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d138      	bne.n	8001ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e032      	b.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d139      	bne.n	8001f6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e033      	b.n	8001f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2224      	movs	r2, #36	; 0x24
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0201 	bic.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f6c:	2302      	movs	r3, #2
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc6:	d130      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd4:	d038      	beq.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2232      	movs	r2, #50	; 0x32
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	e002      	b.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3b01      	subs	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002010:	d102      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f2      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	d110      	bne.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e00f      	b.n	800204a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d007      	beq.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40007000 	.word	0x40007000
 800205c:	20000000 	.word	0x20000000
 8002060:	431bde83 	.word	0x431bde83

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e3fe      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4ba1      	ldr	r3, [pc, #644]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002080:	4b9e      	ldr	r3, [pc, #632]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80e4 	beq.w	8002260 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_RCC_OscConfig+0x4a>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	f040 808b 	bne.w	80021bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f040 8087 	bne.w	80021bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ae:	4b93      	ldr	r3, [pc, #588]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e3d6      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_RCC_OscConfig+0x7c>
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020de:	e005      	b.n	80020ec <HAL_RCC_OscConfig+0x88>
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d223      	bcs.n	8002138 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fd8b 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e3b7      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002104:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a7c      	ldr	r2, [pc, #496]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4977      	ldr	r1, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	4972      	ldr	r1, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e025      	b.n	8002184 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002138:	4b70      	ldr	r3, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6f      	ldr	r2, [pc, #444]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	496a      	ldr	r1, [pc, #424]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002156:	4b69      	ldr	r3, [pc, #420]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	4965      	ldr	r1, [pc, #404]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fd4b 	bl	8002c10 <RCC_SetFlashLatencyFromMSIRange>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e377      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002184:	f000 fc80 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	495a      	ldr	r1, [pc, #360]	; (8002300 <HAL_RCC_OscConfig+0x29c>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_OscConfig+0x2a0>)
 80021a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_OscConfig+0x2a4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe ffe5 	bl	8001178 <HAL_InitTick>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d052      	beq.n	800225e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	e35b      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c4:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d0:	f7ff f822 	bl	8001218 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d8:	f7ff f81e 	bl	8001218 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e344      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ea:	4b44      	ldr	r3, [pc, #272]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a40      	ldr	r2, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	493b      	ldr	r1, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	4936      	ldr	r1, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e01a      	b.n	8002260 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a33      	ldr	r2, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002236:	f7fe ffef 	bl	8001218 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223e:	f7fe ffeb 	bl	8001218 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e311      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x1da>
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d074      	beq.n	8002356 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x21a>
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d10e      	bne.n	8002296 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d064      	beq.n	8002354 <HAL_RCC_OscConfig+0x2f0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d160      	bne.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e2ee      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x24a>
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e01d      	b.n	80022ea <HAL_RCC_OscConfig+0x286>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x26e>
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0f      	ldr	r2, [pc, #60]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x286>
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_RCC_OscConfig+0x298>)
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01c      	beq.n	800232c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe ff91 	bl	8001218 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f8:	e011      	b.n	800231e <HAL_RCC_OscConfig+0x2ba>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	08004c28 	.word	0x08004c28
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe ff84 	bl	8001218 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e2aa      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	4baf      	ldr	r3, [pc, #700]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x2a8>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe ff74 	bl	8001218 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe ff70 	bl	8001218 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e296      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002346:	4ba5      	ldr	r3, [pc, #660]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x2d0>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d060      	beq.n	8002424 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x310>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d119      	bne.n	80023a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d116      	bne.n	80023a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	4b99      	ldr	r3, [pc, #612]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x328>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e273      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b93      	ldr	r3, [pc, #588]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	4990      	ldr	r1, [pc, #576]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a0:	e040      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d023      	beq.n	80023f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a8b      	ldr	r2, [pc, #556]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7fe ff2f 	bl	8001218 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7fe ff2b 	bl	8001218 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e251      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	4b82      	ldr	r3, [pc, #520]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b7f      	ldr	r3, [pc, #508]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	497c      	ldr	r1, [pc, #496]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e018      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	4b7a      	ldr	r3, [pc, #488]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a79      	ldr	r2, [pc, #484]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80023f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe ff0b 	bl	8001218 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7fe ff07 	bl	8001218 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e22d      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03c      	beq.n	80024aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01c      	beq.n	8002472 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	4a67      	ldr	r2, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7fe fee6 	bl	8001218 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fee2 	bl	8001218 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e208      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002462:	4b5e      	ldr	r3, [pc, #376]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCC_OscConfig+0x3ec>
 8002470:	e01b      	b.n	80024aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fec9 	bl	8001218 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe fec5 	bl	8001218 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1eb      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ef      	bne.n	800248a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80a6 	beq.w	8002604 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024bc:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b44      	ldr	r3, [pc, #272]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
 80024d4:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d118      	bne.n	8002522 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3a      	ldr	r2, [pc, #232]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fe8c 	bl	8001218 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fe88 	bl	8001218 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1ae      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_RCC_OscConfig+0x57c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x4d8>
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253a:	e024      	b.n	8002586 <HAL_RCC_OscConfig+0x522>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d110      	bne.n	8002566 <HAL_RCC_OscConfig+0x502>
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002564:	e00f      	b.n	8002586 <HAL_RCC_OscConfig+0x522>
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe fe43 	bl	8001218 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fe3f 	bl	8001218 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e163      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x578>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ed      	beq.n	8002596 <HAL_RCC_OscConfig+0x532>
 80025ba:	e01a      	b.n	80025f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fe2c 	bl	8001218 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fe28 	bl	8001218 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d906      	bls.n	80025e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e14c      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e4:	4ba5      	ldr	r3, [pc, #660]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e8      	bne.n	80025c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4ba0      	ldr	r3, [pc, #640]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	4a9f      	ldr	r2, [pc, #636]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d03c      	beq.n	800268a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01c      	beq.n	8002652 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002618:	4b98      	ldr	r3, [pc, #608]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800261a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261e:	4a97      	ldr	r2, [pc, #604]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fdf6 	bl	8001218 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002630:	f7fe fdf2 	bl	8001218 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e118      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002642:	4b8e      	ldr	r3, [pc, #568]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <HAL_RCC_OscConfig+0x5cc>
 8002650:	e01b      	b.n	800268a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002652:	4b8a      	ldr	r3, [pc, #552]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002658:	4a88      	ldr	r2, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fdd9 	bl	8001218 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266a:	f7fe fdd5 	bl	8001218 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0fb      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800267c:	4b7f      	ldr	r3, [pc, #508]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800267e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ef      	bne.n	800266a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80ef 	beq.w	8002872 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	2b02      	cmp	r3, #2
 800269a:	f040 80c5 	bne.w	8002828 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800269e:	4b77      	ldr	r3, [pc, #476]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d12c      	bne.n	800270c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	3b01      	subs	r3, #1
 80026be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d123      	bne.n	800270c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d11b      	bne.n	800270c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d113      	bne.n	800270c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	3b01      	subs	r3, #1
 80026f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d109      	bne.n	800270c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	3b01      	subs	r3, #1
 8002706:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d067      	beq.n	80027dc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d062      	beq.n	80027d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002712:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0a8      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002722:	4b56      	ldr	r3, [pc, #344]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a55      	ldr	r2, [pc, #340]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800272e:	f7fe fd73 	bl	8001218 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7fe fd6f 	bl	8001218 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e095      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002748:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x81c>)
 800275a:	4013      	ands	r3, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002764:	3a01      	subs	r2, #1
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	4311      	orrs	r1, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800276e:	0212      	lsls	r2, r2, #8
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0552      	lsls	r2, r2, #21
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002782:	0852      	lsrs	r2, r2, #1
 8002784:	3a01      	subs	r2, #1
 8002786:	0652      	lsls	r2, r2, #25
 8002788:	4311      	orrs	r1, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800278e:	06d2      	lsls	r2, r2, #27
 8002790:	430a      	orrs	r2, r1
 8002792:	493a      	ldr	r1, [pc, #232]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002794:	4313      	orrs	r3, r2
 8002796:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a37      	ldr	r2, [pc, #220]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027a4:	4b35      	ldr	r3, [pc, #212]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a34      	ldr	r2, [pc, #208]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b0:	f7fe fd32 	bl	8001218 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fd2e 	bl	8001218 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e054      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ca:	4b2c      	ldr	r3, [pc, #176]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d6:	e04c      	b.n	8002872 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e04b      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d144      	bne.n	8002872 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027e8:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a23      	ldr	r2, [pc, #140]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x818>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002800:	f7fe fd0a 	bl	8001218 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fd06 	bl	8001218 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e02c      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_RCC_OscConfig+0x818>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x7a4>
 8002826:	e024      	b.n	8002872 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d01f      	beq.n	800286e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fced 	bl	8001218 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fce9 	bl	8001218 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e00f      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	4905      	ldr	r1, [pc, #20]	; (800287c <HAL_RCC_OscConfig+0x818>)
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_RCC_OscConfig+0x820>)
 8002868:	4013      	ands	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e001      	b.n	8002872 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	019d808c 	.word	0x019d808c
 8002884:	feeefffc 	.word	0xfeeefffc

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0e7      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d910      	bls.n	80028cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4970      	ldr	r1, [pc, #448]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b6e      	ldr	r3, [pc, #440]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0cf      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d908      	bls.n	80028fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e8:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4960      	ldr	r1, [pc, #384]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d04c      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	4b5a      	ldr	r3, [pc, #360]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d121      	bne.n	800295e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0a6      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d115      	bne.n	800295e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e09a      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e08e      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294e:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e086      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4943      	ldr	r1, [pc, #268]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002970:	f7fe fc52 	bl	8001218 <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7fe fc4e 	bl	8001218 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e06e      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 020c 	and.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	429a      	cmp	r2, r3
 800299e:	d1eb      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d010      	beq.n	80029ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d208      	bcs.n	80029ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	492b      	ldr	r1, [pc, #172]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d210      	bcs.n	80029fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 0207 	bic.w	r2, r3, #7
 80029e4:	4923      	ldr	r1, [pc, #140]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <HAL_RCC_ClockConfig+0x1ec>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e036      	b.n	8002a6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4918      	ldr	r1, [pc, #96]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4910      	ldr	r1, [pc, #64]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a3c:	f000 f824 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	490b      	ldr	r1, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1fc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fb89 	bl	8001178 <HAL_InitTick>
 8002a66:	4603      	mov	r3, r0
 8002a68:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08004c28 	.word	0x08004c28
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000004 	.word	0x20000004

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b3e      	ldr	r3, [pc, #248]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x34>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d121      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d11e      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002abc:	4b34      	ldr	r3, [pc, #208]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ac8:	4b31      	ldr	r3, [pc, #196]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ae4:	4a2b      	ldr	r2, [pc, #172]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e004      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d134      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d003      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0xac>
 8002b2c:	e005      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b30:	617b      	str	r3, [r7, #20]
      break;
 8002b32:	e005      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b36:	617b      	str	r3, [r7, #20]
      break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	617b      	str	r3, [r7, #20]
      break;
 8002b3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	fb02 f203 	mul.w	r2, r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	0e5b      	lsrs	r3, r3, #25
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	3301      	adds	r3, #1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b80:	69bb      	ldr	r3, [r7, #24]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	08004c40 	.word	0x08004c40
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bbc:	f7ff fff0 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4904      	ldr	r1, [pc, #16]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08004c38 	.word	0x08004c38

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be8:	f7ff ffda 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0adb      	lsrs	r3, r3, #11
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4904      	ldr	r1, [pc, #16]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08004c38 	.word	0x08004c38

08002c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f9b8 	bl	8001f9c <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
 8002c2e:	e014      	b.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f9a8 	bl	8001f9c <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c60:	d10b      	bne.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d919      	bls.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c6c:	d902      	bls.n	8002c74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6e:	2302      	movs	r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e013      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c74:	2301      	movs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e010      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d902      	bls.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c80:	2303      	movs	r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e00a      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d102      	bne.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e004      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b70      	cmp	r3, #112	; 0x70
 8002c96:	d101      	bne.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 0207 	bic.w	r2, r3, #7
 8002ca4:	4909      	ldr	r1, [pc, #36]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cdc:	2300      	movs	r3, #0
 8002cde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d031      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cf4:	d01a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cfa:	d814      	bhi.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d009      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d04:	d10f      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d06:	4bac      	ldr	r3, [pc, #688]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4aab      	ldr	r2, [pc, #684]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d12:	e00c      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f9dc 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d24:	e003      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d34:	4ba0      	ldr	r3, [pc, #640]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	499d      	ldr	r1, [pc, #628]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d4a:	e001      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8099 	beq.w	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d62:	4b95      	ldr	r3, [pc, #596]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4a8e      	ldr	r2, [pc, #568]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6593      	str	r3, [r2, #88]	; 0x58
 8002d84:	4b8c      	ldr	r3, [pc, #560]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d94:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a88      	ldr	r2, [pc, #544]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fa3a 	bl	8001218 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da6:	e009      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da8:	f7fe fa36 	bl	8001218 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d155      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dce:	4b7a      	ldr	r3, [pc, #488]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01e      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d019      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e06:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a6a      	ldr	r2, [pc, #424]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e16:	4a68      	ldr	r2, [pc, #416]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f9f6 	bl	8001218 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7fe f9f2 	bl	8001218 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	74fb      	strb	r3, [r7, #19]
            break;
 8002e46:	e006      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ec      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5c:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	4953      	ldr	r1, [pc, #332]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e72:	e004      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
 8002e78:	e001      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7e:	7c7b      	ldrb	r3, [r7, #17]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e84:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f023 0203 	bic.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4943      	ldr	r1, [pc, #268]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f023 020c 	bic.w	r2, r3, #12
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	493a      	ldr	r1, [pc, #232]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	4932      	ldr	r1, [pc, #200]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	4929      	ldr	r1, [pc, #164]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4918      	ldr	r1, [pc, #96]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4910      	ldr	r1, [pc, #64]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02c      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4907      	ldr	r1, [pc, #28]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002faa:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	4a02      	ldr	r2, [pc, #8]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb4:	60d3      	str	r3, [r2, #12]
 8002fb6:	e015      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f881 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d028      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	492d      	ldr	r1, [pc, #180]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800300e:	d106      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800301a:	60d3      	str	r3, [r2, #12]
 800301c:	e011      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003026:	d10c      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f852 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01c      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305c:	4915      	ldr	r1, [pc, #84]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800306c:	d10c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	2102      	movs	r1, #2
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f82f 	bl	80030d8 <RCCEx_PLLSAI1_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000

080030d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030e6:	4b74      	ldr	r3, [pc, #464]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d018      	beq.n	8003124 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030f2:	4b71      	ldr	r3, [pc, #452]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f003 0203 	and.w	r2, r3, #3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d10d      	bne.n	800311e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
       ||
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800310a:	4b6b      	ldr	r3, [pc, #428]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
       ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d047      	beq.n	80031ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	e044      	b.n	80031ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d018      	beq.n	800315e <RCCEx_PLLSAI1_Config+0x86>
 800312c:	2b03      	cmp	r3, #3
 800312e:	d825      	bhi.n	800317c <RCCEx_PLLSAI1_Config+0xa4>
 8003130:	2b01      	cmp	r3, #1
 8003132:	d002      	beq.n	800313a <RCCEx_PLLSAI1_Config+0x62>
 8003134:	2b02      	cmp	r3, #2
 8003136:	d009      	beq.n	800314c <RCCEx_PLLSAI1_Config+0x74>
 8003138:	e020      	b.n	800317c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d11d      	bne.n	8003182 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314a:	e01a      	b.n	8003182 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800314c:	4b5a      	ldr	r3, [pc, #360]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d116      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e013      	b.n	8003186 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316a:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317a:	e006      	b.n	800318a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      break;
 8003180:	e004      	b.n	800318c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003182:	bf00      	nop
 8003184:	e002      	b.n	800318c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800318a:	bf00      	nop
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003192:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	430b      	orrs	r3, r1
 80031a8:	4943      	ldr	r1, [pc, #268]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d17c      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031b4:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a3f      	ldr	r2, [pc, #252]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c0:	f7fe f82a 	bl	8001218 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031c6:	e009      	b.n	80031dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c8:	f7fe f826 	bl	8001218 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d902      	bls.n	80031dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	73fb      	strb	r3, [r7, #15]
        break;
 80031da:	e005      	b.n	80031e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ef      	bne.n	80031c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d15f      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d110      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f4:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6892      	ldr	r2, [r2, #8]
 8003204:	0211      	lsls	r1, r2, #8
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68d2      	ldr	r2, [r2, #12]
 800320a:	06d2      	lsls	r2, r2, #27
 800320c:	430a      	orrs	r2, r1
 800320e:	492a      	ldr	r1, [pc, #168]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003210:	4313      	orrs	r3, r2
 8003212:	610b      	str	r3, [r1, #16]
 8003214:	e027      	b.n	8003266 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d112      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800321c:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	0211      	lsls	r1, r2, #8
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6912      	ldr	r2, [r2, #16]
 8003232:	0852      	lsrs	r2, r2, #1
 8003234:	3a01      	subs	r2, #1
 8003236:	0552      	lsls	r2, r2, #21
 8003238:	430a      	orrs	r2, r1
 800323a:	491f      	ldr	r1, [pc, #124]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	610b      	str	r3, [r1, #16]
 8003240:	e011      	b.n	8003266 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800324a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6892      	ldr	r2, [r2, #8]
 8003252:	0211      	lsls	r1, r2, #8
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6952      	ldr	r2, [r2, #20]
 8003258:	0852      	lsrs	r2, r2, #1
 800325a:	3a01      	subs	r2, #1
 800325c:	0652      	lsls	r2, r2, #25
 800325e:	430a      	orrs	r2, r1
 8003260:	4915      	ldr	r1, [pc, #84]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003262:	4313      	orrs	r3, r2
 8003264:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003266:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003270:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7fd ffd1 	bl	8001218 <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003278:	e009      	b.n	800328e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327a:	f7fd ffcd 	bl	8001218 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d902      	bls.n	800328e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	73fb      	strb	r3, [r7, #15]
          break;
 800328c:	e005      	b.n	800329a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ef      	beq.n	800327a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d106      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4903      	ldr	r1, [pc, #12]	; (80032b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e040      	b.n	8003350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fdbe 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8c0 	bl	8003480 <UART_SetConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e022      	b.n	8003350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fabe 	bl	8003894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fb45 	bl	80039d8 <UART_CheckIdleState>
 800334e:	4603      	mov	r3, r0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336c:	2b20      	cmp	r3, #32
 800336e:	f040 8082 	bne.w	8003476 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_UART_Transmit+0x26>
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07a      	b.n	8003478 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_UART_Transmit+0x38>
 800338c:	2302      	movs	r3, #2
 800338e:	e073      	b.n	8003478 <HAL_UART_Transmit+0x120>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2221      	movs	r2, #33	; 0x21
 80033a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033a6:	f7fd ff37 	bl	8001218 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d108      	bne.n	80033d8 <HAL_UART_Transmit+0x80>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e003      	b.n	80033e0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033e8:	e02d      	b.n	8003446 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fb38 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e039      	b.n	8003478 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	881a      	ldrh	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003416:	b292      	uxth	r2, r2
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	3302      	adds	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e008      	b.n	8003434 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b292      	uxth	r2, r2
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3301      	adds	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1cb      	bne.n	80033ea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fb04 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e005      	b.n	8003478 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4baf      	ldr	r3, [pc, #700]	; (8003768 <UART_SetConfig+0x2e8>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	69f9      	ldr	r1, [r7, #28]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4aa4      	ldr	r2, [pc, #656]	; (800376c <UART_SetConfig+0x2ec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a9b      	ldr	r2, [pc, #620]	; (8003770 <UART_SetConfig+0x2f0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d121      	bne.n	800354a <UART_SetConfig+0xca>
 8003506:	4b9b      	ldr	r3, [pc, #620]	; (8003774 <UART_SetConfig+0x2f4>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2b03      	cmp	r3, #3
 8003512:	d817      	bhi.n	8003544 <UART_SetConfig+0xc4>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x9c>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	0800352d 	.word	0x0800352d
 8003520:	08003539 	.word	0x08003539
 8003524:	08003533 	.word	0x08003533
 8003528:	0800353f 	.word	0x0800353f
 800352c:	2301      	movs	r3, #1
 800352e:	76fb      	strb	r3, [r7, #27]
 8003530:	e070      	b.n	8003614 <UART_SetConfig+0x194>
 8003532:	2302      	movs	r3, #2
 8003534:	76fb      	strb	r3, [r7, #27]
 8003536:	e06d      	b.n	8003614 <UART_SetConfig+0x194>
 8003538:	2304      	movs	r3, #4
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	e06a      	b.n	8003614 <UART_SetConfig+0x194>
 800353e:	2308      	movs	r3, #8
 8003540:	76fb      	strb	r3, [r7, #27]
 8003542:	e067      	b.n	8003614 <UART_SetConfig+0x194>
 8003544:	2310      	movs	r3, #16
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e064      	b.n	8003614 <UART_SetConfig+0x194>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a8a      	ldr	r2, [pc, #552]	; (8003778 <UART_SetConfig+0x2f8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d132      	bne.n	80035ba <UART_SetConfig+0x13a>
 8003554:	4b87      	ldr	r3, [pc, #540]	; (8003774 <UART_SetConfig+0x2f4>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d828      	bhi.n	80035b4 <UART_SetConfig+0x134>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0xe8>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035b5 	.word	0x080035b5
 8003570:	080035b5 	.word	0x080035b5
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035b5 	.word	0x080035b5
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080035b5 	.word	0x080035b5
 8003588:	080035a3 	.word	0x080035a3
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035b5 	.word	0x080035b5
 8003594:	080035b5 	.word	0x080035b5
 8003598:	080035af 	.word	0x080035af
 800359c:	2300      	movs	r3, #0
 800359e:	76fb      	strb	r3, [r7, #27]
 80035a0:	e038      	b.n	8003614 <UART_SetConfig+0x194>
 80035a2:	2302      	movs	r3, #2
 80035a4:	76fb      	strb	r3, [r7, #27]
 80035a6:	e035      	b.n	8003614 <UART_SetConfig+0x194>
 80035a8:	2304      	movs	r3, #4
 80035aa:	76fb      	strb	r3, [r7, #27]
 80035ac:	e032      	b.n	8003614 <UART_SetConfig+0x194>
 80035ae:	2308      	movs	r3, #8
 80035b0:	76fb      	strb	r3, [r7, #27]
 80035b2:	e02f      	b.n	8003614 <UART_SetConfig+0x194>
 80035b4:	2310      	movs	r3, #16
 80035b6:	76fb      	strb	r3, [r7, #27]
 80035b8:	e02c      	b.n	8003614 <UART_SetConfig+0x194>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a6b      	ldr	r2, [pc, #428]	; (800376c <UART_SetConfig+0x2ec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d125      	bne.n	8003610 <UART_SetConfig+0x190>
 80035c4:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <UART_SetConfig+0x2f4>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035d2:	d017      	beq.n	8003604 <UART_SetConfig+0x184>
 80035d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035d8:	d817      	bhi.n	800360a <UART_SetConfig+0x18a>
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035de:	d00b      	beq.n	80035f8 <UART_SetConfig+0x178>
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e4:	d811      	bhi.n	800360a <UART_SetConfig+0x18a>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <UART_SetConfig+0x172>
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ee:	d006      	beq.n	80035fe <UART_SetConfig+0x17e>
 80035f0:	e00b      	b.n	800360a <UART_SetConfig+0x18a>
 80035f2:	2300      	movs	r3, #0
 80035f4:	76fb      	strb	r3, [r7, #27]
 80035f6:	e00d      	b.n	8003614 <UART_SetConfig+0x194>
 80035f8:	2302      	movs	r3, #2
 80035fa:	76fb      	strb	r3, [r7, #27]
 80035fc:	e00a      	b.n	8003614 <UART_SetConfig+0x194>
 80035fe:	2304      	movs	r3, #4
 8003600:	76fb      	strb	r3, [r7, #27]
 8003602:	e007      	b.n	8003614 <UART_SetConfig+0x194>
 8003604:	2308      	movs	r3, #8
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	e004      	b.n	8003614 <UART_SetConfig+0x194>
 800360a:	2310      	movs	r3, #16
 800360c:	76fb      	strb	r3, [r7, #27]
 800360e:	e001      	b.n	8003614 <UART_SetConfig+0x194>
 8003610:	2310      	movs	r3, #16
 8003612:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a54      	ldr	r2, [pc, #336]	; (800376c <UART_SetConfig+0x2ec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d173      	bne.n	8003706 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800361e:	7efb      	ldrb	r3, [r7, #27]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d824      	bhi.n	800366e <UART_SetConfig+0x1ee>
 8003624:	a201      	add	r2, pc, #4	; (adr r2, 800362c <UART_SetConfig+0x1ac>)
 8003626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362a:	bf00      	nop
 800362c:	08003651 	.word	0x08003651
 8003630:	0800366f 	.word	0x0800366f
 8003634:	08003659 	.word	0x08003659
 8003638:	0800366f 	.word	0x0800366f
 800363c:	0800365f 	.word	0x0800365f
 8003640:	0800366f 	.word	0x0800366f
 8003644:	0800366f 	.word	0x0800366f
 8003648:	0800366f 	.word	0x0800366f
 800364c:	08003667 	.word	0x08003667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7ff fab2 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8003654:	6178      	str	r0, [r7, #20]
        break;
 8003656:	e00f      	b.n	8003678 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003658:	4b48      	ldr	r3, [pc, #288]	; (800377c <UART_SetConfig+0x2fc>)
 800365a:	617b      	str	r3, [r7, #20]
        break;
 800365c:	e00c      	b.n	8003678 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7ff fa13 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8003662:	6178      	str	r0, [r7, #20]
        break;
 8003664:	e008      	b.n	8003678 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366a:	617b      	str	r3, [r7, #20]
        break;
 800366c:	e004      	b.n	8003678 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	76bb      	strb	r3, [r7, #26]
        break;
 8003676:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80fc 	beq.w	8003878 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d305      	bcc.n	800369c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d902      	bls.n	80036a2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	76bb      	strb	r3, [r7, #26]
 80036a0:	e0ea      	b.n	8003878 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	020b      	lsls	r3, r1, #8
 80036b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036b8:	0202      	lsls	r2, r0, #8
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	6849      	ldr	r1, [r1, #4]
 80036be:	0849      	lsrs	r1, r1, #1
 80036c0:	4608      	mov	r0, r1
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	1814      	adds	r4, r2, r0
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	4620      	mov	r0, r4
 80036d8:	4629      	mov	r1, r5
 80036da:	f7fc fdc9 	bl	8000270 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4613      	mov	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ec:	d308      	bcc.n	8003700 <UART_SetConfig+0x280>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f4:	d204      	bcs.n	8003700 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	e0bb      	b.n	8003878 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	76bb      	strb	r3, [r7, #26]
 8003704:	e0b8      	b.n	8003878 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370e:	d167      	bne.n	80037e0 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8003710:	7efb      	ldrb	r3, [r7, #27]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d834      	bhi.n	8003780 <UART_SetConfig+0x300>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x29c>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003741 	.word	0x08003741
 8003720:	08003749 	.word	0x08003749
 8003724:	08003751 	.word	0x08003751
 8003728:	08003781 	.word	0x08003781
 800372c:	08003757 	.word	0x08003757
 8003730:	08003781 	.word	0x08003781
 8003734:	08003781 	.word	0x08003781
 8003738:	08003781 	.word	0x08003781
 800373c:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7ff fa3a 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8003744:	6178      	str	r0, [r7, #20]
        break;
 8003746:	e020      	b.n	800378a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7ff fa4c 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 800374c:	6178      	str	r0, [r7, #20]
        break;
 800374e:	e01c      	b.n	800378a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <UART_SetConfig+0x2fc>)
 8003752:	617b      	str	r3, [r7, #20]
        break;
 8003754:	e019      	b.n	800378a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7ff f997 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800375a:	6178      	str	r0, [r7, #20]
        break;
 800375c:	e015      	b.n	800378a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	617b      	str	r3, [r7, #20]
        break;
 8003764:	e011      	b.n	800378a <UART_SetConfig+0x30a>
 8003766:	bf00      	nop
 8003768:	efff69f3 	.word	0xefff69f3
 800376c:	40008000 	.word	0x40008000
 8003770:	40013800 	.word	0x40013800
 8003774:	40021000 	.word	0x40021000
 8003778:	40004400 	.word	0x40004400
 800377c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	76bb      	strb	r3, [r7, #26]
        break;
 8003788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d073      	beq.n	8003878 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005a      	lsls	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d916      	bls.n	80037da <UART_SetConfig+0x35a>
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d212      	bcs.n	80037da <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f023 030f 	bic.w	r3, r3, #15
 80037bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	89fa      	ldrh	r2, [r7, #14]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e04e      	b.n	8003878 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	76bb      	strb	r3, [r7, #26]
 80037de:	e04b      	b.n	8003878 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e0:	7efb      	ldrb	r3, [r7, #27]
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d827      	bhi.n	8003836 <UART_SetConfig+0x3b6>
 80037e6:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <UART_SetConfig+0x36c>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003821 	.word	0x08003821
 80037f8:	08003837 	.word	0x08003837
 80037fc:	08003827 	.word	0x08003827
 8003800:	08003837 	.word	0x08003837
 8003804:	08003837 	.word	0x08003837
 8003808:	08003837 	.word	0x08003837
 800380c:	0800382f 	.word	0x0800382f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7ff f9d2 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 8003814:	6178      	str	r0, [r7, #20]
        break;
 8003816:	e013      	b.n	8003840 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7ff f9e4 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 800381c:	6178      	str	r0, [r7, #20]
        break;
 800381e:	e00f      	b.n	8003840 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <UART_SetConfig+0x410>)
 8003822:	617b      	str	r3, [r7, #20]
        break;
 8003824:	e00c      	b.n	8003840 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003826:	f7ff f92f 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800382a:	6178      	str	r0, [r7, #20]
        break;
 800382c:	e008      	b.n	8003840 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003832:	617b      	str	r3, [r7, #20]
        break;
 8003834:	e004      	b.n	8003840 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	76bb      	strb	r3, [r7, #26]
        break;
 800383e:	bf00      	nop
    }

    if (pclk != 0U)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085a      	lsrs	r2, r3, #1
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	441a      	add	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2b0f      	cmp	r3, #15
 800385e:	d909      	bls.n	8003874 <UART_SetConfig+0x3f4>
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d205      	bcs.n	8003874 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e001      	b.n	8003878 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003884:	7ebb      	ldrb	r3, [r7, #26]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bdb0      	pop	{r4, r5, r7, pc}
 800388e:	bf00      	nop
 8003890:	00f42400 	.word	0x00f42400

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01a      	beq.n	80039aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d10a      	bne.n	80039aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e8:	f7fd fc16 	bl	8001218 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d10e      	bne.n	8003a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f82d 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e023      	b.n	8003a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d10e      	bne.n	8003a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f817 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e00d      	b.n	8003a62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b09c      	sub	sp, #112	; 0x70
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	e0a5      	b.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	f000 80a1 	beq.w	8003bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fd fbc7 	bl	8001218 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x32>
 8003a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d13e      	bne.n	8003b1a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e6      	bne.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3308      	adds	r3, #8
 8003aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aee:	64ba      	str	r2, [r7, #72]	; 0x48
 8003af0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e5      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e067      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d04f      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d147      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b40:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
 8003b62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	613b      	str	r3, [r7, #16]
   return(result);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b94:	623a      	str	r2, [r7, #32]
 8003b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e010      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	f43f af4a 	beq.w	8003a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3770      	adds	r7, #112	; 0x70
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <__errno>:
 8003bf4:	4b01      	ldr	r3, [pc, #4]	; (8003bfc <__errno+0x8>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	2000000c 	.word	0x2000000c

08003c00 <__libc_init_array>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4d0d      	ldr	r5, [pc, #52]	; (8003c38 <__libc_init_array+0x38>)
 8003c04:	4c0d      	ldr	r4, [pc, #52]	; (8003c3c <__libc_init_array+0x3c>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	d109      	bne.n	8003c24 <__libc_init_array+0x24>
 8003c10:	4d0b      	ldr	r5, [pc, #44]	; (8003c40 <__libc_init_array+0x40>)
 8003c12:	4c0c      	ldr	r4, [pc, #48]	; (8003c44 <__libc_init_array+0x44>)
 8003c14:	f000 ffec 	bl	8004bf0 <_init>
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	42a6      	cmp	r6, r4
 8003c20:	d105      	bne.n	8003c2e <__libc_init_array+0x2e>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c28:	4798      	blx	r3
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7ee      	b.n	8003c0c <__libc_init_array+0xc>
 8003c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c32:	4798      	blx	r3
 8003c34:	3601      	adds	r6, #1
 8003c36:	e7f2      	b.n	8003c1e <__libc_init_array+0x1e>
 8003c38:	08004d10 	.word	0x08004d10
 8003c3c:	08004d10 	.word	0x08004d10
 8003c40:	08004d10 	.word	0x08004d10
 8003c44:	08004d14 	.word	0x08004d14

08003c48 <memset>:
 8003c48:	4402      	add	r2, r0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <memset+0xa>
 8003c50:	4770      	bx	lr
 8003c52:	f803 1b01 	strb.w	r1, [r3], #1
 8003c56:	e7f9      	b.n	8003c4c <memset+0x4>

08003c58 <iprintf>:
 8003c58:	b40f      	push	{r0, r1, r2, r3}
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <iprintf+0x2c>)
 8003c5c:	b513      	push	{r0, r1, r4, lr}
 8003c5e:	681c      	ldr	r4, [r3, #0]
 8003c60:	b124      	cbz	r4, 8003c6c <iprintf+0x14>
 8003c62:	69a3      	ldr	r3, [r4, #24]
 8003c64:	b913      	cbnz	r3, 8003c6c <iprintf+0x14>
 8003c66:	4620      	mov	r0, r4
 8003c68:	f000 fa5e 	bl	8004128 <__sinit>
 8003c6c:	ab05      	add	r3, sp, #20
 8003c6e:	9a04      	ldr	r2, [sp, #16]
 8003c70:	68a1      	ldr	r1, [r4, #8]
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	4620      	mov	r0, r4
 8003c76:	f000 fc2f 	bl	80044d8 <_vfiprintf_r>
 8003c7a:	b002      	add	sp, #8
 8003c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c80:	b004      	add	sp, #16
 8003c82:	4770      	bx	lr
 8003c84:	2000000c 	.word	0x2000000c

08003c88 <_puts_r>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	460e      	mov	r6, r1
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	b118      	cbz	r0, 8003c98 <_puts_r+0x10>
 8003c90:	6983      	ldr	r3, [r0, #24]
 8003c92:	b90b      	cbnz	r3, 8003c98 <_puts_r+0x10>
 8003c94:	f000 fa48 	bl	8004128 <__sinit>
 8003c98:	69ab      	ldr	r3, [r5, #24]
 8003c9a:	68ac      	ldr	r4, [r5, #8]
 8003c9c:	b913      	cbnz	r3, 8003ca4 <_puts_r+0x1c>
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f000 fa42 	bl	8004128 <__sinit>
 8003ca4:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <_puts_r+0xd0>)
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d120      	bne.n	8003cec <_puts_r+0x64>
 8003caa:	686c      	ldr	r4, [r5, #4]
 8003cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cae:	07db      	lsls	r3, r3, #31
 8003cb0:	d405      	bmi.n	8003cbe <_puts_r+0x36>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	0598      	lsls	r0, r3, #22
 8003cb6:	d402      	bmi.n	8003cbe <_puts_r+0x36>
 8003cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cba:	f000 fad3 	bl	8004264 <__retarget_lock_acquire_recursive>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	0719      	lsls	r1, r3, #28
 8003cc2:	d51d      	bpl.n	8003d00 <_puts_r+0x78>
 8003cc4:	6923      	ldr	r3, [r4, #16]
 8003cc6:	b1db      	cbz	r3, 8003d00 <_puts_r+0x78>
 8003cc8:	3e01      	subs	r6, #1
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	60a3      	str	r3, [r4, #8]
 8003cd4:	bb39      	cbnz	r1, 8003d26 <_puts_r+0x9e>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da38      	bge.n	8003d4c <_puts_r+0xc4>
 8003cda:	4622      	mov	r2, r4
 8003cdc:	210a      	movs	r1, #10
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 f848 	bl	8003d74 <__swbuf_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d011      	beq.n	8003d0c <_puts_r+0x84>
 8003ce8:	250a      	movs	r5, #10
 8003cea:	e011      	b.n	8003d10 <_puts_r+0x88>
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <_puts_r+0xd4>)
 8003cee:	429c      	cmp	r4, r3
 8003cf0:	d101      	bne.n	8003cf6 <_puts_r+0x6e>
 8003cf2:	68ac      	ldr	r4, [r5, #8]
 8003cf4:	e7da      	b.n	8003cac <_puts_r+0x24>
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <_puts_r+0xd8>)
 8003cf8:	429c      	cmp	r4, r3
 8003cfa:	bf08      	it	eq
 8003cfc:	68ec      	ldreq	r4, [r5, #12]
 8003cfe:	e7d5      	b.n	8003cac <_puts_r+0x24>
 8003d00:	4621      	mov	r1, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	f000 f888 	bl	8003e18 <__swsetup_r>
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d0dd      	beq.n	8003cc8 <_puts_r+0x40>
 8003d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d12:	07da      	lsls	r2, r3, #31
 8003d14:	d405      	bmi.n	8003d22 <_puts_r+0x9a>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	059b      	lsls	r3, r3, #22
 8003d1a:	d402      	bmi.n	8003d22 <_puts_r+0x9a>
 8003d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d1e:	f000 faa2 	bl	8004266 <__retarget_lock_release_recursive>
 8003d22:	4628      	mov	r0, r5
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da04      	bge.n	8003d34 <_puts_r+0xac>
 8003d2a:	69a2      	ldr	r2, [r4, #24]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	dc06      	bgt.n	8003d3e <_puts_r+0xb6>
 8003d30:	290a      	cmp	r1, #10
 8003d32:	d004      	beq.n	8003d3e <_puts_r+0xb6>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	7019      	strb	r1, [r3, #0]
 8003d3c:	e7c5      	b.n	8003cca <_puts_r+0x42>
 8003d3e:	4622      	mov	r2, r4
 8003d40:	4628      	mov	r0, r5
 8003d42:	f000 f817 	bl	8003d74 <__swbuf_r>
 8003d46:	3001      	adds	r0, #1
 8003d48:	d1bf      	bne.n	8003cca <_puts_r+0x42>
 8003d4a:	e7df      	b.n	8003d0c <_puts_r+0x84>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	250a      	movs	r5, #10
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	6022      	str	r2, [r4, #0]
 8003d54:	701d      	strb	r5, [r3, #0]
 8003d56:	e7db      	b.n	8003d10 <_puts_r+0x88>
 8003d58:	08004c94 	.word	0x08004c94
 8003d5c:	08004cb4 	.word	0x08004cb4
 8003d60:	08004c74 	.word	0x08004c74

08003d64 <puts>:
 8003d64:	4b02      	ldr	r3, [pc, #8]	; (8003d70 <puts+0xc>)
 8003d66:	4601      	mov	r1, r0
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	f7ff bf8d 	b.w	8003c88 <_puts_r>
 8003d6e:	bf00      	nop
 8003d70:	2000000c 	.word	0x2000000c

08003d74 <__swbuf_r>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	460e      	mov	r6, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	b118      	cbz	r0, 8003d86 <__swbuf_r+0x12>
 8003d7e:	6983      	ldr	r3, [r0, #24]
 8003d80:	b90b      	cbnz	r3, 8003d86 <__swbuf_r+0x12>
 8003d82:	f000 f9d1 	bl	8004128 <__sinit>
 8003d86:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <__swbuf_r+0x98>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d12b      	bne.n	8003de4 <__swbuf_r+0x70>
 8003d8c:	686c      	ldr	r4, [r5, #4]
 8003d8e:	69a3      	ldr	r3, [r4, #24]
 8003d90:	60a3      	str	r3, [r4, #8]
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	071a      	lsls	r2, r3, #28
 8003d96:	d52f      	bpl.n	8003df8 <__swbuf_r+0x84>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	b36b      	cbz	r3, 8003df8 <__swbuf_r+0x84>
 8003d9c:	6923      	ldr	r3, [r4, #16]
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	1ac0      	subs	r0, r0, r3
 8003da2:	6963      	ldr	r3, [r4, #20]
 8003da4:	b2f6      	uxtb	r6, r6
 8003da6:	4283      	cmp	r3, r0
 8003da8:	4637      	mov	r7, r6
 8003daa:	dc04      	bgt.n	8003db6 <__swbuf_r+0x42>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f926 	bl	8004000 <_fflush_r>
 8003db4:	bb30      	cbnz	r0, 8003e04 <__swbuf_r+0x90>
 8003db6:	68a3      	ldr	r3, [r4, #8]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60a3      	str	r3, [r4, #8]
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	6022      	str	r2, [r4, #0]
 8003dc2:	701e      	strb	r6, [r3, #0]
 8003dc4:	6963      	ldr	r3, [r4, #20]
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	4283      	cmp	r3, r0
 8003dca:	d004      	beq.n	8003dd6 <__swbuf_r+0x62>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	07db      	lsls	r3, r3, #31
 8003dd0:	d506      	bpl.n	8003de0 <__swbuf_r+0x6c>
 8003dd2:	2e0a      	cmp	r6, #10
 8003dd4:	d104      	bne.n	8003de0 <__swbuf_r+0x6c>
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 f911 	bl	8004000 <_fflush_r>
 8003dde:	b988      	cbnz	r0, 8003e04 <__swbuf_r+0x90>
 8003de0:	4638      	mov	r0, r7
 8003de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <__swbuf_r+0x9c>)
 8003de6:	429c      	cmp	r4, r3
 8003de8:	d101      	bne.n	8003dee <__swbuf_r+0x7a>
 8003dea:	68ac      	ldr	r4, [r5, #8]
 8003dec:	e7cf      	b.n	8003d8e <__swbuf_r+0x1a>
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <__swbuf_r+0xa0>)
 8003df0:	429c      	cmp	r4, r3
 8003df2:	bf08      	it	eq
 8003df4:	68ec      	ldreq	r4, [r5, #12]
 8003df6:	e7ca      	b.n	8003d8e <__swbuf_r+0x1a>
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f000 f80c 	bl	8003e18 <__swsetup_r>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d0cb      	beq.n	8003d9c <__swbuf_r+0x28>
 8003e04:	f04f 37ff 	mov.w	r7, #4294967295
 8003e08:	e7ea      	b.n	8003de0 <__swbuf_r+0x6c>
 8003e0a:	bf00      	nop
 8003e0c:	08004c94 	.word	0x08004c94
 8003e10:	08004cb4 	.word	0x08004cb4
 8003e14:	08004c74 	.word	0x08004c74

08003e18 <__swsetup_r>:
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <__swsetup_r+0xcc>)
 8003e1a:	b570      	push	{r4, r5, r6, lr}
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	b125      	cbz	r5, 8003e2e <__swsetup_r+0x16>
 8003e24:	69ab      	ldr	r3, [r5, #24]
 8003e26:	b913      	cbnz	r3, 8003e2e <__swsetup_r+0x16>
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 f97d 	bl	8004128 <__sinit>
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <__swsetup_r+0xd0>)
 8003e30:	429c      	cmp	r4, r3
 8003e32:	d10f      	bne.n	8003e54 <__swsetup_r+0x3c>
 8003e34:	686c      	ldr	r4, [r5, #4]
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e3c:	0719      	lsls	r1, r3, #28
 8003e3e:	d42c      	bmi.n	8003e9a <__swsetup_r+0x82>
 8003e40:	06dd      	lsls	r5, r3, #27
 8003e42:	d411      	bmi.n	8003e68 <__swsetup_r+0x50>
 8003e44:	2309      	movs	r3, #9
 8003e46:	6033      	str	r3, [r6, #0]
 8003e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	e03e      	b.n	8003ed2 <__swsetup_r+0xba>
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <__swsetup_r+0xd4>)
 8003e56:	429c      	cmp	r4, r3
 8003e58:	d101      	bne.n	8003e5e <__swsetup_r+0x46>
 8003e5a:	68ac      	ldr	r4, [r5, #8]
 8003e5c:	e7eb      	b.n	8003e36 <__swsetup_r+0x1e>
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <__swsetup_r+0xd8>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	bf08      	it	eq
 8003e64:	68ec      	ldreq	r4, [r5, #12]
 8003e66:	e7e6      	b.n	8003e36 <__swsetup_r+0x1e>
 8003e68:	0758      	lsls	r0, r3, #29
 8003e6a:	d512      	bpl.n	8003e92 <__swsetup_r+0x7a>
 8003e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e6e:	b141      	cbz	r1, 8003e82 <__swsetup_r+0x6a>
 8003e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d002      	beq.n	8003e7e <__swsetup_r+0x66>
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f000 fa59 	bl	8004330 <_free_r>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6363      	str	r3, [r4, #52]	; 0x34
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	b94b      	cbnz	r3, 8003eb2 <__swsetup_r+0x9a>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d003      	beq.n	8003eb2 <__swsetup_r+0x9a>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f9ff 	bl	80042b0 <__smakebuf_r>
 8003eb2:	89a0      	ldrh	r0, [r4, #12]
 8003eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eb8:	f010 0301 	ands.w	r3, r0, #1
 8003ebc:	d00a      	beq.n	8003ed4 <__swsetup_r+0xbc>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60a3      	str	r3, [r4, #8]
 8003ec2:	6963      	ldr	r3, [r4, #20]
 8003ec4:	425b      	negs	r3, r3
 8003ec6:	61a3      	str	r3, [r4, #24]
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	b943      	cbnz	r3, 8003ede <__swsetup_r+0xc6>
 8003ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ed0:	d1ba      	bne.n	8003e48 <__swsetup_r+0x30>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	0781      	lsls	r1, r0, #30
 8003ed6:	bf58      	it	pl
 8003ed8:	6963      	ldrpl	r3, [r4, #20]
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	e7f4      	b.n	8003ec8 <__swsetup_r+0xb0>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e7f7      	b.n	8003ed2 <__swsetup_r+0xba>
 8003ee2:	bf00      	nop
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	08004c94 	.word	0x08004c94
 8003eec:	08004cb4 	.word	0x08004cb4
 8003ef0:	08004c74 	.word	0x08004c74

08003ef4 <__sflush_r>:
 8003ef4:	898a      	ldrh	r2, [r1, #12]
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	0710      	lsls	r0, r2, #28
 8003efe:	460c      	mov	r4, r1
 8003f00:	d458      	bmi.n	8003fb4 <__sflush_r+0xc0>
 8003f02:	684b      	ldr	r3, [r1, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dc05      	bgt.n	8003f14 <__sflush_r+0x20>
 8003f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	dc02      	bgt.n	8003f14 <__sflush_r+0x20>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	d0f9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f20:	682f      	ldr	r7, [r5, #0]
 8003f22:	602b      	str	r3, [r5, #0]
 8003f24:	d032      	beq.n	8003f8c <__sflush_r+0x98>
 8003f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	075a      	lsls	r2, r3, #29
 8003f2c:	d505      	bpl.n	8003f3a <__sflush_r+0x46>
 8003f2e:	6863      	ldr	r3, [r4, #4]
 8003f30:	1ac0      	subs	r0, r0, r3
 8003f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f34:	b10b      	cbz	r3, 8003f3a <__sflush_r+0x46>
 8003f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f38:	1ac0      	subs	r0, r0, r3
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f40:	6a21      	ldr	r1, [r4, #32]
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b0      	blx	r6
 8003f46:	1c43      	adds	r3, r0, #1
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	d106      	bne.n	8003f5a <__sflush_r+0x66>
 8003f4c:	6829      	ldr	r1, [r5, #0]
 8003f4e:	291d      	cmp	r1, #29
 8003f50:	d82c      	bhi.n	8003fac <__sflush_r+0xb8>
 8003f52:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <__sflush_r+0x108>)
 8003f54:	40ca      	lsrs	r2, r1
 8003f56:	07d6      	lsls	r6, r2, #31
 8003f58:	d528      	bpl.n	8003fac <__sflush_r+0xb8>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	6062      	str	r2, [r4, #4]
 8003f5e:	04d9      	lsls	r1, r3, #19
 8003f60:	6922      	ldr	r2, [r4, #16]
 8003f62:	6022      	str	r2, [r4, #0]
 8003f64:	d504      	bpl.n	8003f70 <__sflush_r+0x7c>
 8003f66:	1c42      	adds	r2, r0, #1
 8003f68:	d101      	bne.n	8003f6e <__sflush_r+0x7a>
 8003f6a:	682b      	ldr	r3, [r5, #0]
 8003f6c:	b903      	cbnz	r3, 8003f70 <__sflush_r+0x7c>
 8003f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8003f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f72:	602f      	str	r7, [r5, #0]
 8003f74:	2900      	cmp	r1, #0
 8003f76:	d0ca      	beq.n	8003f0e <__sflush_r+0x1a>
 8003f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f7c:	4299      	cmp	r1, r3
 8003f7e:	d002      	beq.n	8003f86 <__sflush_r+0x92>
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 f9d5 	bl	8004330 <_free_r>
 8003f86:	2000      	movs	r0, #0
 8003f88:	6360      	str	r0, [r4, #52]	; 0x34
 8003f8a:	e7c1      	b.n	8003f10 <__sflush_r+0x1c>
 8003f8c:	6a21      	ldr	r1, [r4, #32]
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b0      	blx	r6
 8003f94:	1c41      	adds	r1, r0, #1
 8003f96:	d1c7      	bne.n	8003f28 <__sflush_r+0x34>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0c4      	beq.n	8003f28 <__sflush_r+0x34>
 8003f9e:	2b1d      	cmp	r3, #29
 8003fa0:	d001      	beq.n	8003fa6 <__sflush_r+0xb2>
 8003fa2:	2b16      	cmp	r3, #22
 8003fa4:	d101      	bne.n	8003faa <__sflush_r+0xb6>
 8003fa6:	602f      	str	r7, [r5, #0]
 8003fa8:	e7b1      	b.n	8003f0e <__sflush_r+0x1a>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e7ad      	b.n	8003f10 <__sflush_r+0x1c>
 8003fb4:	690f      	ldr	r7, [r1, #16]
 8003fb6:	2f00      	cmp	r7, #0
 8003fb8:	d0a9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003fba:	0793      	lsls	r3, r2, #30
 8003fbc:	680e      	ldr	r6, [r1, #0]
 8003fbe:	bf08      	it	eq
 8003fc0:	694b      	ldreq	r3, [r1, #20]
 8003fc2:	600f      	str	r7, [r1, #0]
 8003fc4:	bf18      	it	ne
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	eba6 0807 	sub.w	r8, r6, r7
 8003fcc:	608b      	str	r3, [r1, #8]
 8003fce:	f1b8 0f00 	cmp.w	r8, #0
 8003fd2:	dd9c      	ble.n	8003f0e <__sflush_r+0x1a>
 8003fd4:	6a21      	ldr	r1, [r4, #32]
 8003fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fd8:	4643      	mov	r3, r8
 8003fda:	463a      	mov	r2, r7
 8003fdc:	4628      	mov	r0, r5
 8003fde:	47b0      	blx	r6
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	dc06      	bgt.n	8003ff2 <__sflush_r+0xfe>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e78e      	b.n	8003f10 <__sflush_r+0x1c>
 8003ff2:	4407      	add	r7, r0
 8003ff4:	eba8 0800 	sub.w	r8, r8, r0
 8003ff8:	e7e9      	b.n	8003fce <__sflush_r+0xda>
 8003ffa:	bf00      	nop
 8003ffc:	20400001 	.word	0x20400001

08004000 <_fflush_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	4605      	mov	r5, r0
 8004006:	460c      	mov	r4, r1
 8004008:	b913      	cbnz	r3, 8004010 <_fflush_r+0x10>
 800400a:	2500      	movs	r5, #0
 800400c:	4628      	mov	r0, r5
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	b118      	cbz	r0, 800401a <_fflush_r+0x1a>
 8004012:	6983      	ldr	r3, [r0, #24]
 8004014:	b90b      	cbnz	r3, 800401a <_fflush_r+0x1a>
 8004016:	f000 f887 	bl	8004128 <__sinit>
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <_fflush_r+0x6c>)
 800401c:	429c      	cmp	r4, r3
 800401e:	d11b      	bne.n	8004058 <_fflush_r+0x58>
 8004020:	686c      	ldr	r4, [r5, #4]
 8004022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ef      	beq.n	800400a <_fflush_r+0xa>
 800402a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800402c:	07d0      	lsls	r0, r2, #31
 800402e:	d404      	bmi.n	800403a <_fflush_r+0x3a>
 8004030:	0599      	lsls	r1, r3, #22
 8004032:	d402      	bmi.n	800403a <_fflush_r+0x3a>
 8004034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004036:	f000 f915 	bl	8004264 <__retarget_lock_acquire_recursive>
 800403a:	4628      	mov	r0, r5
 800403c:	4621      	mov	r1, r4
 800403e:	f7ff ff59 	bl	8003ef4 <__sflush_r>
 8004042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004044:	07da      	lsls	r2, r3, #31
 8004046:	4605      	mov	r5, r0
 8004048:	d4e0      	bmi.n	800400c <_fflush_r+0xc>
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	059b      	lsls	r3, r3, #22
 800404e:	d4dd      	bmi.n	800400c <_fflush_r+0xc>
 8004050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004052:	f000 f908 	bl	8004266 <__retarget_lock_release_recursive>
 8004056:	e7d9      	b.n	800400c <_fflush_r+0xc>
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <_fflush_r+0x70>)
 800405a:	429c      	cmp	r4, r3
 800405c:	d101      	bne.n	8004062 <_fflush_r+0x62>
 800405e:	68ac      	ldr	r4, [r5, #8]
 8004060:	e7df      	b.n	8004022 <_fflush_r+0x22>
 8004062:	4b04      	ldr	r3, [pc, #16]	; (8004074 <_fflush_r+0x74>)
 8004064:	429c      	cmp	r4, r3
 8004066:	bf08      	it	eq
 8004068:	68ec      	ldreq	r4, [r5, #12]
 800406a:	e7da      	b.n	8004022 <_fflush_r+0x22>
 800406c:	08004c94 	.word	0x08004c94
 8004070:	08004cb4 	.word	0x08004cb4
 8004074:	08004c74 	.word	0x08004c74

08004078 <std>:
 8004078:	2300      	movs	r3, #0
 800407a:	b510      	push	{r4, lr}
 800407c:	4604      	mov	r4, r0
 800407e:	e9c0 3300 	strd	r3, r3, [r0]
 8004082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004086:	6083      	str	r3, [r0, #8]
 8004088:	8181      	strh	r1, [r0, #12]
 800408a:	6643      	str	r3, [r0, #100]	; 0x64
 800408c:	81c2      	strh	r2, [r0, #14]
 800408e:	6183      	str	r3, [r0, #24]
 8004090:	4619      	mov	r1, r3
 8004092:	2208      	movs	r2, #8
 8004094:	305c      	adds	r0, #92	; 0x5c
 8004096:	f7ff fdd7 	bl	8003c48 <memset>
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <std+0x38>)
 800409c:	6263      	str	r3, [r4, #36]	; 0x24
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <std+0x3c>)
 80040a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <std+0x40>)
 80040a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <std+0x44>)
 80040a8:	6224      	str	r4, [r4, #32]
 80040aa:	6323      	str	r3, [r4, #48]	; 0x30
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	bf00      	nop
 80040b0:	08004a81 	.word	0x08004a81
 80040b4:	08004aa3 	.word	0x08004aa3
 80040b8:	08004adb 	.word	0x08004adb
 80040bc:	08004aff 	.word	0x08004aff

080040c0 <_cleanup_r>:
 80040c0:	4901      	ldr	r1, [pc, #4]	; (80040c8 <_cleanup_r+0x8>)
 80040c2:	f000 b8af 	b.w	8004224 <_fwalk_reent>
 80040c6:	bf00      	nop
 80040c8:	08004001 	.word	0x08004001

080040cc <__sfmoreglue>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	1e4a      	subs	r2, r1, #1
 80040d0:	2568      	movs	r5, #104	; 0x68
 80040d2:	4355      	muls	r5, r2
 80040d4:	460e      	mov	r6, r1
 80040d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040da:	f000 f979 	bl	80043d0 <_malloc_r>
 80040de:	4604      	mov	r4, r0
 80040e0:	b140      	cbz	r0, 80040f4 <__sfmoreglue+0x28>
 80040e2:	2100      	movs	r1, #0
 80040e4:	e9c0 1600 	strd	r1, r6, [r0]
 80040e8:	300c      	adds	r0, #12
 80040ea:	60a0      	str	r0, [r4, #8]
 80040ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040f0:	f7ff fdaa 	bl	8003c48 <memset>
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd70      	pop	{r4, r5, r6, pc}

080040f8 <__sfp_lock_acquire>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__sfp_lock_acquire+0x8>)
 80040fa:	f000 b8b3 	b.w	8004264 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	20000188 	.word	0x20000188

08004104 <__sfp_lock_release>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__sfp_lock_release+0x8>)
 8004106:	f000 b8ae 	b.w	8004266 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	20000188 	.word	0x20000188

08004110 <__sinit_lock_acquire>:
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <__sinit_lock_acquire+0x8>)
 8004112:	f000 b8a7 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004116:	bf00      	nop
 8004118:	20000183 	.word	0x20000183

0800411c <__sinit_lock_release>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__sinit_lock_release+0x8>)
 800411e:	f000 b8a2 	b.w	8004266 <__retarget_lock_release_recursive>
 8004122:	bf00      	nop
 8004124:	20000183 	.word	0x20000183

08004128 <__sinit>:
 8004128:	b510      	push	{r4, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	f7ff fff0 	bl	8004110 <__sinit_lock_acquire>
 8004130:	69a3      	ldr	r3, [r4, #24]
 8004132:	b11b      	cbz	r3, 800413c <__sinit+0x14>
 8004134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004138:	f7ff bff0 	b.w	800411c <__sinit_lock_release>
 800413c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004140:	6523      	str	r3, [r4, #80]	; 0x50
 8004142:	4b13      	ldr	r3, [pc, #76]	; (8004190 <__sinit+0x68>)
 8004144:	4a13      	ldr	r2, [pc, #76]	; (8004194 <__sinit+0x6c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	62a2      	str	r2, [r4, #40]	; 0x28
 800414a:	42a3      	cmp	r3, r4
 800414c:	bf04      	itt	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	61a3      	streq	r3, [r4, #24]
 8004152:	4620      	mov	r0, r4
 8004154:	f000 f820 	bl	8004198 <__sfp>
 8004158:	6060      	str	r0, [r4, #4]
 800415a:	4620      	mov	r0, r4
 800415c:	f000 f81c 	bl	8004198 <__sfp>
 8004160:	60a0      	str	r0, [r4, #8]
 8004162:	4620      	mov	r0, r4
 8004164:	f000 f818 	bl	8004198 <__sfp>
 8004168:	2200      	movs	r2, #0
 800416a:	60e0      	str	r0, [r4, #12]
 800416c:	2104      	movs	r1, #4
 800416e:	6860      	ldr	r0, [r4, #4]
 8004170:	f7ff ff82 	bl	8004078 <std>
 8004174:	68a0      	ldr	r0, [r4, #8]
 8004176:	2201      	movs	r2, #1
 8004178:	2109      	movs	r1, #9
 800417a:	f7ff ff7d 	bl	8004078 <std>
 800417e:	68e0      	ldr	r0, [r4, #12]
 8004180:	2202      	movs	r2, #2
 8004182:	2112      	movs	r1, #18
 8004184:	f7ff ff78 	bl	8004078 <std>
 8004188:	2301      	movs	r3, #1
 800418a:	61a3      	str	r3, [r4, #24]
 800418c:	e7d2      	b.n	8004134 <__sinit+0xc>
 800418e:	bf00      	nop
 8004190:	08004c70 	.word	0x08004c70
 8004194:	080040c1 	.word	0x080040c1

08004198 <__sfp>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	4607      	mov	r7, r0
 800419c:	f7ff ffac 	bl	80040f8 <__sfp_lock_acquire>
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <__sfp+0x84>)
 80041a2:	681e      	ldr	r6, [r3, #0]
 80041a4:	69b3      	ldr	r3, [r6, #24]
 80041a6:	b913      	cbnz	r3, 80041ae <__sfp+0x16>
 80041a8:	4630      	mov	r0, r6
 80041aa:	f7ff ffbd 	bl	8004128 <__sinit>
 80041ae:	3648      	adds	r6, #72	; 0x48
 80041b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	d503      	bpl.n	80041c0 <__sfp+0x28>
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	b30b      	cbz	r3, 8004200 <__sfp+0x68>
 80041bc:	6836      	ldr	r6, [r6, #0]
 80041be:	e7f7      	b.n	80041b0 <__sfp+0x18>
 80041c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041c4:	b9d5      	cbnz	r5, 80041fc <__sfp+0x64>
 80041c6:	4b16      	ldr	r3, [pc, #88]	; (8004220 <__sfp+0x88>)
 80041c8:	60e3      	str	r3, [r4, #12]
 80041ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041ce:	6665      	str	r5, [r4, #100]	; 0x64
 80041d0:	f000 f847 	bl	8004262 <__retarget_lock_init_recursive>
 80041d4:	f7ff ff96 	bl	8004104 <__sfp_lock_release>
 80041d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041e0:	6025      	str	r5, [r4, #0]
 80041e2:	61a5      	str	r5, [r4, #24]
 80041e4:	2208      	movs	r2, #8
 80041e6:	4629      	mov	r1, r5
 80041e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041ec:	f7ff fd2c 	bl	8003c48 <memset>
 80041f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041f8:	4620      	mov	r0, r4
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fc:	3468      	adds	r4, #104	; 0x68
 80041fe:	e7d9      	b.n	80041b4 <__sfp+0x1c>
 8004200:	2104      	movs	r1, #4
 8004202:	4638      	mov	r0, r7
 8004204:	f7ff ff62 	bl	80040cc <__sfmoreglue>
 8004208:	4604      	mov	r4, r0
 800420a:	6030      	str	r0, [r6, #0]
 800420c:	2800      	cmp	r0, #0
 800420e:	d1d5      	bne.n	80041bc <__sfp+0x24>
 8004210:	f7ff ff78 	bl	8004104 <__sfp_lock_release>
 8004214:	230c      	movs	r3, #12
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	e7ee      	b.n	80041f8 <__sfp+0x60>
 800421a:	bf00      	nop
 800421c:	08004c70 	.word	0x08004c70
 8004220:	ffff0001 	.word	0xffff0001

08004224 <_fwalk_reent>:
 8004224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004228:	4606      	mov	r6, r0
 800422a:	4688      	mov	r8, r1
 800422c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004230:	2700      	movs	r7, #0
 8004232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004236:	f1b9 0901 	subs.w	r9, r9, #1
 800423a:	d505      	bpl.n	8004248 <_fwalk_reent+0x24>
 800423c:	6824      	ldr	r4, [r4, #0]
 800423e:	2c00      	cmp	r4, #0
 8004240:	d1f7      	bne.n	8004232 <_fwalk_reent+0xe>
 8004242:	4638      	mov	r0, r7
 8004244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004248:	89ab      	ldrh	r3, [r5, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d907      	bls.n	800425e <_fwalk_reent+0x3a>
 800424e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004252:	3301      	adds	r3, #1
 8004254:	d003      	beq.n	800425e <_fwalk_reent+0x3a>
 8004256:	4629      	mov	r1, r5
 8004258:	4630      	mov	r0, r6
 800425a:	47c0      	blx	r8
 800425c:	4307      	orrs	r7, r0
 800425e:	3568      	adds	r5, #104	; 0x68
 8004260:	e7e9      	b.n	8004236 <_fwalk_reent+0x12>

08004262 <__retarget_lock_init_recursive>:
 8004262:	4770      	bx	lr

08004264 <__retarget_lock_acquire_recursive>:
 8004264:	4770      	bx	lr

08004266 <__retarget_lock_release_recursive>:
 8004266:	4770      	bx	lr

08004268 <__swhatbuf_r>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	460e      	mov	r6, r1
 800426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004270:	2900      	cmp	r1, #0
 8004272:	b096      	sub	sp, #88	; 0x58
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	da07      	bge.n	800428a <__swhatbuf_r+0x22>
 800427a:	2300      	movs	r3, #0
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	89b3      	ldrh	r3, [r6, #12]
 8004280:	061a      	lsls	r2, r3, #24
 8004282:	d410      	bmi.n	80042a6 <__swhatbuf_r+0x3e>
 8004284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004288:	e00e      	b.n	80042a8 <__swhatbuf_r+0x40>
 800428a:	466a      	mov	r2, sp
 800428c:	f000 fc5e 	bl	8004b4c <_fstat_r>
 8004290:	2800      	cmp	r0, #0
 8004292:	dbf2      	blt.n	800427a <__swhatbuf_r+0x12>
 8004294:	9a01      	ldr	r2, [sp, #4]
 8004296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800429a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800429e:	425a      	negs	r2, r3
 80042a0:	415a      	adcs	r2, r3
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	e7ee      	b.n	8004284 <__swhatbuf_r+0x1c>
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	2000      	movs	r0, #0
 80042aa:	6023      	str	r3, [r4, #0]
 80042ac:	b016      	add	sp, #88	; 0x58
 80042ae:	bd70      	pop	{r4, r5, r6, pc}

080042b0 <__smakebuf_r>:
 80042b0:	898b      	ldrh	r3, [r1, #12]
 80042b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042b4:	079d      	lsls	r5, r3, #30
 80042b6:	4606      	mov	r6, r0
 80042b8:	460c      	mov	r4, r1
 80042ba:	d507      	bpl.n	80042cc <__smakebuf_r+0x1c>
 80042bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	6123      	str	r3, [r4, #16]
 80042c4:	2301      	movs	r3, #1
 80042c6:	6163      	str	r3, [r4, #20]
 80042c8:	b002      	add	sp, #8
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	ab01      	add	r3, sp, #4
 80042ce:	466a      	mov	r2, sp
 80042d0:	f7ff ffca 	bl	8004268 <__swhatbuf_r>
 80042d4:	9900      	ldr	r1, [sp, #0]
 80042d6:	4605      	mov	r5, r0
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 f879 	bl	80043d0 <_malloc_r>
 80042de:	b948      	cbnz	r0, 80042f4 <__smakebuf_r+0x44>
 80042e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e4:	059a      	lsls	r2, r3, #22
 80042e6:	d4ef      	bmi.n	80042c8 <__smakebuf_r+0x18>
 80042e8:	f023 0303 	bic.w	r3, r3, #3
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	e7e3      	b.n	80042bc <__smakebuf_r+0xc>
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <__smakebuf_r+0x7c>)
 80042f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	6020      	str	r0, [r4, #0]
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	9b00      	ldr	r3, [sp, #0]
 8004304:	6163      	str	r3, [r4, #20]
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	6120      	str	r0, [r4, #16]
 800430a:	b15b      	cbz	r3, 8004324 <__smakebuf_r+0x74>
 800430c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004310:	4630      	mov	r0, r6
 8004312:	f000 fc2d 	bl	8004b70 <_isatty_r>
 8004316:	b128      	cbz	r0, 8004324 <__smakebuf_r+0x74>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f023 0303 	bic.w	r3, r3, #3
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	89a0      	ldrh	r0, [r4, #12]
 8004326:	4305      	orrs	r5, r0
 8004328:	81a5      	strh	r5, [r4, #12]
 800432a:	e7cd      	b.n	80042c8 <__smakebuf_r+0x18>
 800432c:	080040c1 	.word	0x080040c1

08004330 <_free_r>:
 8004330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004332:	2900      	cmp	r1, #0
 8004334:	d048      	beq.n	80043c8 <_free_r+0x98>
 8004336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800433a:	9001      	str	r0, [sp, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f1a1 0404 	sub.w	r4, r1, #4
 8004342:	bfb8      	it	lt
 8004344:	18e4      	addlt	r4, r4, r3
 8004346:	f000 fc35 	bl	8004bb4 <__malloc_lock>
 800434a:	4a20      	ldr	r2, [pc, #128]	; (80043cc <_free_r+0x9c>)
 800434c:	9801      	ldr	r0, [sp, #4]
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	4615      	mov	r5, r2
 8004352:	b933      	cbnz	r3, 8004362 <_free_r+0x32>
 8004354:	6063      	str	r3, [r4, #4]
 8004356:	6014      	str	r4, [r2, #0]
 8004358:	b003      	add	sp, #12
 800435a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800435e:	f000 bc2f 	b.w	8004bc0 <__malloc_unlock>
 8004362:	42a3      	cmp	r3, r4
 8004364:	d90b      	bls.n	800437e <_free_r+0x4e>
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	1862      	adds	r2, r4, r1
 800436a:	4293      	cmp	r3, r2
 800436c:	bf04      	itt	eq
 800436e:	681a      	ldreq	r2, [r3, #0]
 8004370:	685b      	ldreq	r3, [r3, #4]
 8004372:	6063      	str	r3, [r4, #4]
 8004374:	bf04      	itt	eq
 8004376:	1852      	addeq	r2, r2, r1
 8004378:	6022      	streq	r2, [r4, #0]
 800437a:	602c      	str	r4, [r5, #0]
 800437c:	e7ec      	b.n	8004358 <_free_r+0x28>
 800437e:	461a      	mov	r2, r3
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	b10b      	cbz	r3, 8004388 <_free_r+0x58>
 8004384:	42a3      	cmp	r3, r4
 8004386:	d9fa      	bls.n	800437e <_free_r+0x4e>
 8004388:	6811      	ldr	r1, [r2, #0]
 800438a:	1855      	adds	r5, r2, r1
 800438c:	42a5      	cmp	r5, r4
 800438e:	d10b      	bne.n	80043a8 <_free_r+0x78>
 8004390:	6824      	ldr	r4, [r4, #0]
 8004392:	4421      	add	r1, r4
 8004394:	1854      	adds	r4, r2, r1
 8004396:	42a3      	cmp	r3, r4
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	d1dd      	bne.n	8004358 <_free_r+0x28>
 800439c:	681c      	ldr	r4, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	6053      	str	r3, [r2, #4]
 80043a2:	4421      	add	r1, r4
 80043a4:	6011      	str	r1, [r2, #0]
 80043a6:	e7d7      	b.n	8004358 <_free_r+0x28>
 80043a8:	d902      	bls.n	80043b0 <_free_r+0x80>
 80043aa:	230c      	movs	r3, #12
 80043ac:	6003      	str	r3, [r0, #0]
 80043ae:	e7d3      	b.n	8004358 <_free_r+0x28>
 80043b0:	6825      	ldr	r5, [r4, #0]
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	428b      	cmp	r3, r1
 80043b6:	bf04      	itt	eq
 80043b8:	6819      	ldreq	r1, [r3, #0]
 80043ba:	685b      	ldreq	r3, [r3, #4]
 80043bc:	6063      	str	r3, [r4, #4]
 80043be:	bf04      	itt	eq
 80043c0:	1949      	addeq	r1, r1, r5
 80043c2:	6021      	streq	r1, [r4, #0]
 80043c4:	6054      	str	r4, [r2, #4]
 80043c6:	e7c7      	b.n	8004358 <_free_r+0x28>
 80043c8:	b003      	add	sp, #12
 80043ca:	bd30      	pop	{r4, r5, pc}
 80043cc:	20000090 	.word	0x20000090

080043d0 <_malloc_r>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	1ccd      	adds	r5, r1, #3
 80043d4:	f025 0503 	bic.w	r5, r5, #3
 80043d8:	3508      	adds	r5, #8
 80043da:	2d0c      	cmp	r5, #12
 80043dc:	bf38      	it	cc
 80043de:	250c      	movcc	r5, #12
 80043e0:	2d00      	cmp	r5, #0
 80043e2:	4606      	mov	r6, r0
 80043e4:	db01      	blt.n	80043ea <_malloc_r+0x1a>
 80043e6:	42a9      	cmp	r1, r5
 80043e8:	d903      	bls.n	80043f2 <_malloc_r+0x22>
 80043ea:	230c      	movs	r3, #12
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	2000      	movs	r0, #0
 80043f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f2:	f000 fbdf 	bl	8004bb4 <__malloc_lock>
 80043f6:	4921      	ldr	r1, [pc, #132]	; (800447c <_malloc_r+0xac>)
 80043f8:	680a      	ldr	r2, [r1, #0]
 80043fa:	4614      	mov	r4, r2
 80043fc:	b99c      	cbnz	r4, 8004426 <_malloc_r+0x56>
 80043fe:	4f20      	ldr	r7, [pc, #128]	; (8004480 <_malloc_r+0xb0>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	b923      	cbnz	r3, 800440e <_malloc_r+0x3e>
 8004404:	4621      	mov	r1, r4
 8004406:	4630      	mov	r0, r6
 8004408:	f000 fb2a 	bl	8004a60 <_sbrk_r>
 800440c:	6038      	str	r0, [r7, #0]
 800440e:	4629      	mov	r1, r5
 8004410:	4630      	mov	r0, r6
 8004412:	f000 fb25 	bl	8004a60 <_sbrk_r>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	d123      	bne.n	8004462 <_malloc_r+0x92>
 800441a:	230c      	movs	r3, #12
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	4630      	mov	r0, r6
 8004420:	f000 fbce 	bl	8004bc0 <__malloc_unlock>
 8004424:	e7e3      	b.n	80043ee <_malloc_r+0x1e>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	1b5b      	subs	r3, r3, r5
 800442a:	d417      	bmi.n	800445c <_malloc_r+0x8c>
 800442c:	2b0b      	cmp	r3, #11
 800442e:	d903      	bls.n	8004438 <_malloc_r+0x68>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	441c      	add	r4, r3
 8004434:	6025      	str	r5, [r4, #0]
 8004436:	e004      	b.n	8004442 <_malloc_r+0x72>
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	42a2      	cmp	r2, r4
 800443c:	bf0c      	ite	eq
 800443e:	600b      	streq	r3, [r1, #0]
 8004440:	6053      	strne	r3, [r2, #4]
 8004442:	4630      	mov	r0, r6
 8004444:	f000 fbbc 	bl	8004bc0 <__malloc_unlock>
 8004448:	f104 000b 	add.w	r0, r4, #11
 800444c:	1d23      	adds	r3, r4, #4
 800444e:	f020 0007 	bic.w	r0, r0, #7
 8004452:	1ac2      	subs	r2, r0, r3
 8004454:	d0cc      	beq.n	80043f0 <_malloc_r+0x20>
 8004456:	1a1b      	subs	r3, r3, r0
 8004458:	50a3      	str	r3, [r4, r2]
 800445a:	e7c9      	b.n	80043f0 <_malloc_r+0x20>
 800445c:	4622      	mov	r2, r4
 800445e:	6864      	ldr	r4, [r4, #4]
 8004460:	e7cc      	b.n	80043fc <_malloc_r+0x2c>
 8004462:	1cc4      	adds	r4, r0, #3
 8004464:	f024 0403 	bic.w	r4, r4, #3
 8004468:	42a0      	cmp	r0, r4
 800446a:	d0e3      	beq.n	8004434 <_malloc_r+0x64>
 800446c:	1a21      	subs	r1, r4, r0
 800446e:	4630      	mov	r0, r6
 8004470:	f000 faf6 	bl	8004a60 <_sbrk_r>
 8004474:	3001      	adds	r0, #1
 8004476:	d1dd      	bne.n	8004434 <_malloc_r+0x64>
 8004478:	e7cf      	b.n	800441a <_malloc_r+0x4a>
 800447a:	bf00      	nop
 800447c:	20000090 	.word	0x20000090
 8004480:	20000094 	.word	0x20000094

08004484 <__sfputc_r>:
 8004484:	6893      	ldr	r3, [r2, #8]
 8004486:	3b01      	subs	r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	b410      	push	{r4}
 800448c:	6093      	str	r3, [r2, #8]
 800448e:	da08      	bge.n	80044a2 <__sfputc_r+0x1e>
 8004490:	6994      	ldr	r4, [r2, #24]
 8004492:	42a3      	cmp	r3, r4
 8004494:	db01      	blt.n	800449a <__sfputc_r+0x16>
 8004496:	290a      	cmp	r1, #10
 8004498:	d103      	bne.n	80044a2 <__sfputc_r+0x1e>
 800449a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800449e:	f7ff bc69 	b.w	8003d74 <__swbuf_r>
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	1c58      	adds	r0, r3, #1
 80044a6:	6010      	str	r0, [r2, #0]
 80044a8:	7019      	strb	r1, [r3, #0]
 80044aa:	4608      	mov	r0, r1
 80044ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <__sfputs_r>:
 80044b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b4:	4606      	mov	r6, r0
 80044b6:	460f      	mov	r7, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	18d5      	adds	r5, r2, r3
 80044bc:	42ac      	cmp	r4, r5
 80044be:	d101      	bne.n	80044c4 <__sfputs_r+0x12>
 80044c0:	2000      	movs	r0, #0
 80044c2:	e007      	b.n	80044d4 <__sfputs_r+0x22>
 80044c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c8:	463a      	mov	r2, r7
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff ffda 	bl	8004484 <__sfputc_r>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d1f3      	bne.n	80044bc <__sfputs_r+0xa>
 80044d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d8 <_vfiprintf_r>:
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	460d      	mov	r5, r1
 80044de:	b09d      	sub	sp, #116	; 0x74
 80044e0:	4614      	mov	r4, r2
 80044e2:	4698      	mov	r8, r3
 80044e4:	4606      	mov	r6, r0
 80044e6:	b118      	cbz	r0, 80044f0 <_vfiprintf_r+0x18>
 80044e8:	6983      	ldr	r3, [r0, #24]
 80044ea:	b90b      	cbnz	r3, 80044f0 <_vfiprintf_r+0x18>
 80044ec:	f7ff fe1c 	bl	8004128 <__sinit>
 80044f0:	4b89      	ldr	r3, [pc, #548]	; (8004718 <_vfiprintf_r+0x240>)
 80044f2:	429d      	cmp	r5, r3
 80044f4:	d11b      	bne.n	800452e <_vfiprintf_r+0x56>
 80044f6:	6875      	ldr	r5, [r6, #4]
 80044f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	d405      	bmi.n	800450a <_vfiprintf_r+0x32>
 80044fe:	89ab      	ldrh	r3, [r5, #12]
 8004500:	059a      	lsls	r2, r3, #22
 8004502:	d402      	bmi.n	800450a <_vfiprintf_r+0x32>
 8004504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004506:	f7ff fead 	bl	8004264 <__retarget_lock_acquire_recursive>
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	071b      	lsls	r3, r3, #28
 800450e:	d501      	bpl.n	8004514 <_vfiprintf_r+0x3c>
 8004510:	692b      	ldr	r3, [r5, #16]
 8004512:	b9eb      	cbnz	r3, 8004550 <_vfiprintf_r+0x78>
 8004514:	4629      	mov	r1, r5
 8004516:	4630      	mov	r0, r6
 8004518:	f7ff fc7e 	bl	8003e18 <__swsetup_r>
 800451c:	b1c0      	cbz	r0, 8004550 <_vfiprintf_r+0x78>
 800451e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004520:	07dc      	lsls	r4, r3, #31
 8004522:	d50e      	bpl.n	8004542 <_vfiprintf_r+0x6a>
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	b01d      	add	sp, #116	; 0x74
 800452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <_vfiprintf_r+0x244>)
 8004530:	429d      	cmp	r5, r3
 8004532:	d101      	bne.n	8004538 <_vfiprintf_r+0x60>
 8004534:	68b5      	ldr	r5, [r6, #8]
 8004536:	e7df      	b.n	80044f8 <_vfiprintf_r+0x20>
 8004538:	4b79      	ldr	r3, [pc, #484]	; (8004720 <_vfiprintf_r+0x248>)
 800453a:	429d      	cmp	r5, r3
 800453c:	bf08      	it	eq
 800453e:	68f5      	ldreq	r5, [r6, #12]
 8004540:	e7da      	b.n	80044f8 <_vfiprintf_r+0x20>
 8004542:	89ab      	ldrh	r3, [r5, #12]
 8004544:	0598      	lsls	r0, r3, #22
 8004546:	d4ed      	bmi.n	8004524 <_vfiprintf_r+0x4c>
 8004548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800454a:	f7ff fe8c 	bl	8004266 <__retarget_lock_release_recursive>
 800454e:	e7e9      	b.n	8004524 <_vfiprintf_r+0x4c>
 8004550:	2300      	movs	r3, #0
 8004552:	9309      	str	r3, [sp, #36]	; 0x24
 8004554:	2320      	movs	r3, #32
 8004556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800455a:	f8cd 800c 	str.w	r8, [sp, #12]
 800455e:	2330      	movs	r3, #48	; 0x30
 8004560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004724 <_vfiprintf_r+0x24c>
 8004564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004568:	f04f 0901 	mov.w	r9, #1
 800456c:	4623      	mov	r3, r4
 800456e:	469a      	mov	sl, r3
 8004570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004574:	b10a      	cbz	r2, 800457a <_vfiprintf_r+0xa2>
 8004576:	2a25      	cmp	r2, #37	; 0x25
 8004578:	d1f9      	bne.n	800456e <_vfiprintf_r+0x96>
 800457a:	ebba 0b04 	subs.w	fp, sl, r4
 800457e:	d00b      	beq.n	8004598 <_vfiprintf_r+0xc0>
 8004580:	465b      	mov	r3, fp
 8004582:	4622      	mov	r2, r4
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f7ff ff93 	bl	80044b2 <__sfputs_r>
 800458c:	3001      	adds	r0, #1
 800458e:	f000 80aa 	beq.w	80046e6 <_vfiprintf_r+0x20e>
 8004592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004594:	445a      	add	r2, fp
 8004596:	9209      	str	r2, [sp, #36]	; 0x24
 8004598:	f89a 3000 	ldrb.w	r3, [sl]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a2 	beq.w	80046e6 <_vfiprintf_r+0x20e>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ac:	f10a 0a01 	add.w	sl, sl, #1
 80045b0:	9304      	str	r3, [sp, #16]
 80045b2:	9307      	str	r3, [sp, #28]
 80045b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045b8:	931a      	str	r3, [sp, #104]	; 0x68
 80045ba:	4654      	mov	r4, sl
 80045bc:	2205      	movs	r2, #5
 80045be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c2:	4858      	ldr	r0, [pc, #352]	; (8004724 <_vfiprintf_r+0x24c>)
 80045c4:	f7fb fe04 	bl	80001d0 <memchr>
 80045c8:	9a04      	ldr	r2, [sp, #16]
 80045ca:	b9d8      	cbnz	r0, 8004604 <_vfiprintf_r+0x12c>
 80045cc:	06d1      	lsls	r1, r2, #27
 80045ce:	bf44      	itt	mi
 80045d0:	2320      	movmi	r3, #32
 80045d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045d6:	0713      	lsls	r3, r2, #28
 80045d8:	bf44      	itt	mi
 80045da:	232b      	movmi	r3, #43	; 0x2b
 80045dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045e0:	f89a 3000 	ldrb.w	r3, [sl]
 80045e4:	2b2a      	cmp	r3, #42	; 0x2a
 80045e6:	d015      	beq.n	8004614 <_vfiprintf_r+0x13c>
 80045e8:	9a07      	ldr	r2, [sp, #28]
 80045ea:	4654      	mov	r4, sl
 80045ec:	2000      	movs	r0, #0
 80045ee:	f04f 0c0a 	mov.w	ip, #10
 80045f2:	4621      	mov	r1, r4
 80045f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045f8:	3b30      	subs	r3, #48	; 0x30
 80045fa:	2b09      	cmp	r3, #9
 80045fc:	d94e      	bls.n	800469c <_vfiprintf_r+0x1c4>
 80045fe:	b1b0      	cbz	r0, 800462e <_vfiprintf_r+0x156>
 8004600:	9207      	str	r2, [sp, #28]
 8004602:	e014      	b.n	800462e <_vfiprintf_r+0x156>
 8004604:	eba0 0308 	sub.w	r3, r0, r8
 8004608:	fa09 f303 	lsl.w	r3, r9, r3
 800460c:	4313      	orrs	r3, r2
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	46a2      	mov	sl, r4
 8004612:	e7d2      	b.n	80045ba <_vfiprintf_r+0xe2>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	1d19      	adds	r1, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	9103      	str	r1, [sp, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfbb      	ittet	lt
 8004620:	425b      	neglt	r3, r3
 8004622:	f042 0202 	orrlt.w	r2, r2, #2
 8004626:	9307      	strge	r3, [sp, #28]
 8004628:	9307      	strlt	r3, [sp, #28]
 800462a:	bfb8      	it	lt
 800462c:	9204      	strlt	r2, [sp, #16]
 800462e:	7823      	ldrb	r3, [r4, #0]
 8004630:	2b2e      	cmp	r3, #46	; 0x2e
 8004632:	d10c      	bne.n	800464e <_vfiprintf_r+0x176>
 8004634:	7863      	ldrb	r3, [r4, #1]
 8004636:	2b2a      	cmp	r3, #42	; 0x2a
 8004638:	d135      	bne.n	80046a6 <_vfiprintf_r+0x1ce>
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	9203      	str	r2, [sp, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	bfb8      	it	lt
 8004646:	f04f 33ff 	movlt.w	r3, #4294967295
 800464a:	3402      	adds	r4, #2
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004734 <_vfiprintf_r+0x25c>
 8004652:	7821      	ldrb	r1, [r4, #0]
 8004654:	2203      	movs	r2, #3
 8004656:	4650      	mov	r0, sl
 8004658:	f7fb fdba 	bl	80001d0 <memchr>
 800465c:	b140      	cbz	r0, 8004670 <_vfiprintf_r+0x198>
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	eba0 000a 	sub.w	r0, r0, sl
 8004664:	fa03 f000 	lsl.w	r0, r3, r0
 8004668:	9b04      	ldr	r3, [sp, #16]
 800466a:	4303      	orrs	r3, r0
 800466c:	3401      	adds	r4, #1
 800466e:	9304      	str	r3, [sp, #16]
 8004670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004674:	482c      	ldr	r0, [pc, #176]	; (8004728 <_vfiprintf_r+0x250>)
 8004676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800467a:	2206      	movs	r2, #6
 800467c:	f7fb fda8 	bl	80001d0 <memchr>
 8004680:	2800      	cmp	r0, #0
 8004682:	d03f      	beq.n	8004704 <_vfiprintf_r+0x22c>
 8004684:	4b29      	ldr	r3, [pc, #164]	; (800472c <_vfiprintf_r+0x254>)
 8004686:	bb1b      	cbnz	r3, 80046d0 <_vfiprintf_r+0x1f8>
 8004688:	9b03      	ldr	r3, [sp, #12]
 800468a:	3307      	adds	r3, #7
 800468c:	f023 0307 	bic.w	r3, r3, #7
 8004690:	3308      	adds	r3, #8
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004696:	443b      	add	r3, r7
 8004698:	9309      	str	r3, [sp, #36]	; 0x24
 800469a:	e767      	b.n	800456c <_vfiprintf_r+0x94>
 800469c:	fb0c 3202 	mla	r2, ip, r2, r3
 80046a0:	460c      	mov	r4, r1
 80046a2:	2001      	movs	r0, #1
 80046a4:	e7a5      	b.n	80045f2 <_vfiprintf_r+0x11a>
 80046a6:	2300      	movs	r3, #0
 80046a8:	3401      	adds	r4, #1
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	4619      	mov	r1, r3
 80046ae:	f04f 0c0a 	mov.w	ip, #10
 80046b2:	4620      	mov	r0, r4
 80046b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b8:	3a30      	subs	r2, #48	; 0x30
 80046ba:	2a09      	cmp	r2, #9
 80046bc:	d903      	bls.n	80046c6 <_vfiprintf_r+0x1ee>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0c5      	beq.n	800464e <_vfiprintf_r+0x176>
 80046c2:	9105      	str	r1, [sp, #20]
 80046c4:	e7c3      	b.n	800464e <_vfiprintf_r+0x176>
 80046c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80046ca:	4604      	mov	r4, r0
 80046cc:	2301      	movs	r3, #1
 80046ce:	e7f0      	b.n	80046b2 <_vfiprintf_r+0x1da>
 80046d0:	ab03      	add	r3, sp, #12
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	462a      	mov	r2, r5
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <_vfiprintf_r+0x258>)
 80046d8:	a904      	add	r1, sp, #16
 80046da:	4630      	mov	r0, r6
 80046dc:	f3af 8000 	nop.w
 80046e0:	4607      	mov	r7, r0
 80046e2:	1c78      	adds	r0, r7, #1
 80046e4:	d1d6      	bne.n	8004694 <_vfiprintf_r+0x1bc>
 80046e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e8:	07d9      	lsls	r1, r3, #31
 80046ea:	d405      	bmi.n	80046f8 <_vfiprintf_r+0x220>
 80046ec:	89ab      	ldrh	r3, [r5, #12]
 80046ee:	059a      	lsls	r2, r3, #22
 80046f0:	d402      	bmi.n	80046f8 <_vfiprintf_r+0x220>
 80046f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046f4:	f7ff fdb7 	bl	8004266 <__retarget_lock_release_recursive>
 80046f8:	89ab      	ldrh	r3, [r5, #12]
 80046fa:	065b      	lsls	r3, r3, #25
 80046fc:	f53f af12 	bmi.w	8004524 <_vfiprintf_r+0x4c>
 8004700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004702:	e711      	b.n	8004528 <_vfiprintf_r+0x50>
 8004704:	ab03      	add	r3, sp, #12
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	462a      	mov	r2, r5
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <_vfiprintf_r+0x258>)
 800470c:	a904      	add	r1, sp, #16
 800470e:	4630      	mov	r0, r6
 8004710:	f000 f880 	bl	8004814 <_printf_i>
 8004714:	e7e4      	b.n	80046e0 <_vfiprintf_r+0x208>
 8004716:	bf00      	nop
 8004718:	08004c94 	.word	0x08004c94
 800471c:	08004cb4 	.word	0x08004cb4
 8004720:	08004c74 	.word	0x08004c74
 8004724:	08004cd4 	.word	0x08004cd4
 8004728:	08004cde 	.word	0x08004cde
 800472c:	00000000 	.word	0x00000000
 8004730:	080044b3 	.word	0x080044b3
 8004734:	08004cda 	.word	0x08004cda

08004738 <_printf_common>:
 8004738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	4616      	mov	r6, r2
 800473e:	4699      	mov	r9, r3
 8004740:	688a      	ldr	r2, [r1, #8]
 8004742:	690b      	ldr	r3, [r1, #16]
 8004744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004748:	4293      	cmp	r3, r2
 800474a:	bfb8      	it	lt
 800474c:	4613      	movlt	r3, r2
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004754:	4607      	mov	r7, r0
 8004756:	460c      	mov	r4, r1
 8004758:	b10a      	cbz	r2, 800475e <_printf_common+0x26>
 800475a:	3301      	adds	r3, #1
 800475c:	6033      	str	r3, [r6, #0]
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	0699      	lsls	r1, r3, #26
 8004762:	bf42      	ittt	mi
 8004764:	6833      	ldrmi	r3, [r6, #0]
 8004766:	3302      	addmi	r3, #2
 8004768:	6033      	strmi	r3, [r6, #0]
 800476a:	6825      	ldr	r5, [r4, #0]
 800476c:	f015 0506 	ands.w	r5, r5, #6
 8004770:	d106      	bne.n	8004780 <_printf_common+0x48>
 8004772:	f104 0a19 	add.w	sl, r4, #25
 8004776:	68e3      	ldr	r3, [r4, #12]
 8004778:	6832      	ldr	r2, [r6, #0]
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	42ab      	cmp	r3, r5
 800477e:	dc26      	bgt.n	80047ce <_printf_common+0x96>
 8004780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004784:	1e13      	subs	r3, r2, #0
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	bf18      	it	ne
 800478a:	2301      	movne	r3, #1
 800478c:	0692      	lsls	r2, r2, #26
 800478e:	d42b      	bmi.n	80047e8 <_printf_common+0xb0>
 8004790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004794:	4649      	mov	r1, r9
 8004796:	4638      	mov	r0, r7
 8004798:	47c0      	blx	r8
 800479a:	3001      	adds	r0, #1
 800479c:	d01e      	beq.n	80047dc <_printf_common+0xa4>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	68e5      	ldr	r5, [r4, #12]
 80047a2:	6832      	ldr	r2, [r6, #0]
 80047a4:	f003 0306 	and.w	r3, r3, #6
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	bf08      	it	eq
 80047ac:	1aad      	subeq	r5, r5, r2
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	6922      	ldr	r2, [r4, #16]
 80047b2:	bf0c      	ite	eq
 80047b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b8:	2500      	movne	r5, #0
 80047ba:	4293      	cmp	r3, r2
 80047bc:	bfc4      	itt	gt
 80047be:	1a9b      	subgt	r3, r3, r2
 80047c0:	18ed      	addgt	r5, r5, r3
 80047c2:	2600      	movs	r6, #0
 80047c4:	341a      	adds	r4, #26
 80047c6:	42b5      	cmp	r5, r6
 80047c8:	d11a      	bne.n	8004800 <_printf_common+0xc8>
 80047ca:	2000      	movs	r0, #0
 80047cc:	e008      	b.n	80047e0 <_printf_common+0xa8>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4652      	mov	r2, sl
 80047d2:	4649      	mov	r1, r9
 80047d4:	4638      	mov	r0, r7
 80047d6:	47c0      	blx	r8
 80047d8:	3001      	adds	r0, #1
 80047da:	d103      	bne.n	80047e4 <_printf_common+0xac>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e4:	3501      	adds	r5, #1
 80047e6:	e7c6      	b.n	8004776 <_printf_common+0x3e>
 80047e8:	18e1      	adds	r1, r4, r3
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	2030      	movs	r0, #48	; 0x30
 80047ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047f2:	4422      	add	r2, r4
 80047f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047fc:	3302      	adds	r3, #2
 80047fe:	e7c7      	b.n	8004790 <_printf_common+0x58>
 8004800:	2301      	movs	r3, #1
 8004802:	4622      	mov	r2, r4
 8004804:	4649      	mov	r1, r9
 8004806:	4638      	mov	r0, r7
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d0e6      	beq.n	80047dc <_printf_common+0xa4>
 800480e:	3601      	adds	r6, #1
 8004810:	e7d9      	b.n	80047c6 <_printf_common+0x8e>
	...

08004814 <_printf_i>:
 8004814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004818:	460c      	mov	r4, r1
 800481a:	4691      	mov	r9, r2
 800481c:	7e27      	ldrb	r7, [r4, #24]
 800481e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004820:	2f78      	cmp	r7, #120	; 0x78
 8004822:	4680      	mov	r8, r0
 8004824:	469a      	mov	sl, r3
 8004826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800482a:	d807      	bhi.n	800483c <_printf_i+0x28>
 800482c:	2f62      	cmp	r7, #98	; 0x62
 800482e:	d80a      	bhi.n	8004846 <_printf_i+0x32>
 8004830:	2f00      	cmp	r7, #0
 8004832:	f000 80d8 	beq.w	80049e6 <_printf_i+0x1d2>
 8004836:	2f58      	cmp	r7, #88	; 0x58
 8004838:	f000 80a3 	beq.w	8004982 <_printf_i+0x16e>
 800483c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004844:	e03a      	b.n	80048bc <_printf_i+0xa8>
 8004846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800484a:	2b15      	cmp	r3, #21
 800484c:	d8f6      	bhi.n	800483c <_printf_i+0x28>
 800484e:	a001      	add	r0, pc, #4	; (adr r0, 8004854 <_printf_i+0x40>)
 8004850:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004854:	080048ad 	.word	0x080048ad
 8004858:	080048c1 	.word	0x080048c1
 800485c:	0800483d 	.word	0x0800483d
 8004860:	0800483d 	.word	0x0800483d
 8004864:	0800483d 	.word	0x0800483d
 8004868:	0800483d 	.word	0x0800483d
 800486c:	080048c1 	.word	0x080048c1
 8004870:	0800483d 	.word	0x0800483d
 8004874:	0800483d 	.word	0x0800483d
 8004878:	0800483d 	.word	0x0800483d
 800487c:	0800483d 	.word	0x0800483d
 8004880:	080049cd 	.word	0x080049cd
 8004884:	080048f1 	.word	0x080048f1
 8004888:	080049af 	.word	0x080049af
 800488c:	0800483d 	.word	0x0800483d
 8004890:	0800483d 	.word	0x0800483d
 8004894:	080049ef 	.word	0x080049ef
 8004898:	0800483d 	.word	0x0800483d
 800489c:	080048f1 	.word	0x080048f1
 80048a0:	0800483d 	.word	0x0800483d
 80048a4:	0800483d 	.word	0x0800483d
 80048a8:	080049b7 	.word	0x080049b7
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	1d1a      	adds	r2, r3, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	600a      	str	r2, [r1, #0]
 80048b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048bc:	2301      	movs	r3, #1
 80048be:	e0a3      	b.n	8004a08 <_printf_i+0x1f4>
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	6808      	ldr	r0, [r1, #0]
 80048c4:	062e      	lsls	r6, r5, #24
 80048c6:	f100 0304 	add.w	r3, r0, #4
 80048ca:	d50a      	bpl.n	80048e2 <_printf_i+0xce>
 80048cc:	6805      	ldr	r5, [r0, #0]
 80048ce:	600b      	str	r3, [r1, #0]
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	da03      	bge.n	80048dc <_printf_i+0xc8>
 80048d4:	232d      	movs	r3, #45	; 0x2d
 80048d6:	426d      	negs	r5, r5
 80048d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048dc:	485e      	ldr	r0, [pc, #376]	; (8004a58 <_printf_i+0x244>)
 80048de:	230a      	movs	r3, #10
 80048e0:	e019      	b.n	8004916 <_printf_i+0x102>
 80048e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048e6:	6805      	ldr	r5, [r0, #0]
 80048e8:	600b      	str	r3, [r1, #0]
 80048ea:	bf18      	it	ne
 80048ec:	b22d      	sxthne	r5, r5
 80048ee:	e7ef      	b.n	80048d0 <_printf_i+0xbc>
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	6825      	ldr	r5, [r4, #0]
 80048f4:	1d18      	adds	r0, r3, #4
 80048f6:	6008      	str	r0, [r1, #0]
 80048f8:	0628      	lsls	r0, r5, #24
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0xec>
 80048fc:	681d      	ldr	r5, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0xf2>
 8004900:	0669      	lsls	r1, r5, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0xe8>
 8004904:	881d      	ldrh	r5, [r3, #0]
 8004906:	4854      	ldr	r0, [pc, #336]	; (8004a58 <_printf_i+0x244>)
 8004908:	2f6f      	cmp	r7, #111	; 0x6f
 800490a:	bf0c      	ite	eq
 800490c:	2308      	moveq	r3, #8
 800490e:	230a      	movne	r3, #10
 8004910:	2100      	movs	r1, #0
 8004912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004916:	6866      	ldr	r6, [r4, #4]
 8004918:	60a6      	str	r6, [r4, #8]
 800491a:	2e00      	cmp	r6, #0
 800491c:	bfa2      	ittt	ge
 800491e:	6821      	ldrge	r1, [r4, #0]
 8004920:	f021 0104 	bicge.w	r1, r1, #4
 8004924:	6021      	strge	r1, [r4, #0]
 8004926:	b90d      	cbnz	r5, 800492c <_printf_i+0x118>
 8004928:	2e00      	cmp	r6, #0
 800492a:	d04d      	beq.n	80049c8 <_printf_i+0x1b4>
 800492c:	4616      	mov	r6, r2
 800492e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004932:	fb03 5711 	mls	r7, r3, r1, r5
 8004936:	5dc7      	ldrb	r7, [r0, r7]
 8004938:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800493c:	462f      	mov	r7, r5
 800493e:	42bb      	cmp	r3, r7
 8004940:	460d      	mov	r5, r1
 8004942:	d9f4      	bls.n	800492e <_printf_i+0x11a>
 8004944:	2b08      	cmp	r3, #8
 8004946:	d10b      	bne.n	8004960 <_printf_i+0x14c>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	07df      	lsls	r7, r3, #31
 800494c:	d508      	bpl.n	8004960 <_printf_i+0x14c>
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	6861      	ldr	r1, [r4, #4]
 8004952:	4299      	cmp	r1, r3
 8004954:	bfde      	ittt	le
 8004956:	2330      	movle	r3, #48	; 0x30
 8004958:	f806 3c01 	strble.w	r3, [r6, #-1]
 800495c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004960:	1b92      	subs	r2, r2, r6
 8004962:	6122      	str	r2, [r4, #16]
 8004964:	f8cd a000 	str.w	sl, [sp]
 8004968:	464b      	mov	r3, r9
 800496a:	aa03      	add	r2, sp, #12
 800496c:	4621      	mov	r1, r4
 800496e:	4640      	mov	r0, r8
 8004970:	f7ff fee2 	bl	8004738 <_printf_common>
 8004974:	3001      	adds	r0, #1
 8004976:	d14c      	bne.n	8004a12 <_printf_i+0x1fe>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	b004      	add	sp, #16
 800497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004982:	4835      	ldr	r0, [pc, #212]	; (8004a58 <_printf_i+0x244>)
 8004984:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	680e      	ldr	r6, [r1, #0]
 800498c:	061f      	lsls	r7, r3, #24
 800498e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004992:	600e      	str	r6, [r1, #0]
 8004994:	d514      	bpl.n	80049c0 <_printf_i+0x1ac>
 8004996:	07d9      	lsls	r1, r3, #31
 8004998:	bf44      	itt	mi
 800499a:	f043 0320 	orrmi.w	r3, r3, #32
 800499e:	6023      	strmi	r3, [r4, #0]
 80049a0:	b91d      	cbnz	r5, 80049aa <_printf_i+0x196>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	f023 0320 	bic.w	r3, r3, #32
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	2310      	movs	r3, #16
 80049ac:	e7b0      	b.n	8004910 <_printf_i+0xfc>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	2378      	movs	r3, #120	; 0x78
 80049b8:	4828      	ldr	r0, [pc, #160]	; (8004a5c <_printf_i+0x248>)
 80049ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049be:	e7e3      	b.n	8004988 <_printf_i+0x174>
 80049c0:	065e      	lsls	r6, r3, #25
 80049c2:	bf48      	it	mi
 80049c4:	b2ad      	uxthmi	r5, r5
 80049c6:	e7e6      	b.n	8004996 <_printf_i+0x182>
 80049c8:	4616      	mov	r6, r2
 80049ca:	e7bb      	b.n	8004944 <_printf_i+0x130>
 80049cc:	680b      	ldr	r3, [r1, #0]
 80049ce:	6826      	ldr	r6, [r4, #0]
 80049d0:	6960      	ldr	r0, [r4, #20]
 80049d2:	1d1d      	adds	r5, r3, #4
 80049d4:	600d      	str	r5, [r1, #0]
 80049d6:	0635      	lsls	r5, r6, #24
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	d501      	bpl.n	80049e0 <_printf_i+0x1cc>
 80049dc:	6018      	str	r0, [r3, #0]
 80049de:	e002      	b.n	80049e6 <_printf_i+0x1d2>
 80049e0:	0671      	lsls	r1, r6, #25
 80049e2:	d5fb      	bpl.n	80049dc <_printf_i+0x1c8>
 80049e4:	8018      	strh	r0, [r3, #0]
 80049e6:	2300      	movs	r3, #0
 80049e8:	6123      	str	r3, [r4, #16]
 80049ea:	4616      	mov	r6, r2
 80049ec:	e7ba      	b.n	8004964 <_printf_i+0x150>
 80049ee:	680b      	ldr	r3, [r1, #0]
 80049f0:	1d1a      	adds	r2, r3, #4
 80049f2:	600a      	str	r2, [r1, #0]
 80049f4:	681e      	ldr	r6, [r3, #0]
 80049f6:	6862      	ldr	r2, [r4, #4]
 80049f8:	2100      	movs	r1, #0
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7fb fbe8 	bl	80001d0 <memchr>
 8004a00:	b108      	cbz	r0, 8004a06 <_printf_i+0x1f2>
 8004a02:	1b80      	subs	r0, r0, r6
 8004a04:	6060      	str	r0, [r4, #4]
 8004a06:	6863      	ldr	r3, [r4, #4]
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a10:	e7a8      	b.n	8004964 <_printf_i+0x150>
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	4632      	mov	r2, r6
 8004a16:	4649      	mov	r1, r9
 8004a18:	4640      	mov	r0, r8
 8004a1a:	47d0      	blx	sl
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d0ab      	beq.n	8004978 <_printf_i+0x164>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	079b      	lsls	r3, r3, #30
 8004a24:	d413      	bmi.n	8004a4e <_printf_i+0x23a>
 8004a26:	68e0      	ldr	r0, [r4, #12]
 8004a28:	9b03      	ldr	r3, [sp, #12]
 8004a2a:	4298      	cmp	r0, r3
 8004a2c:	bfb8      	it	lt
 8004a2e:	4618      	movlt	r0, r3
 8004a30:	e7a4      	b.n	800497c <_printf_i+0x168>
 8004a32:	2301      	movs	r3, #1
 8004a34:	4632      	mov	r2, r6
 8004a36:	4649      	mov	r1, r9
 8004a38:	4640      	mov	r0, r8
 8004a3a:	47d0      	blx	sl
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d09b      	beq.n	8004978 <_printf_i+0x164>
 8004a40:	3501      	adds	r5, #1
 8004a42:	68e3      	ldr	r3, [r4, #12]
 8004a44:	9903      	ldr	r1, [sp, #12]
 8004a46:	1a5b      	subs	r3, r3, r1
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dcf2      	bgt.n	8004a32 <_printf_i+0x21e>
 8004a4c:	e7eb      	b.n	8004a26 <_printf_i+0x212>
 8004a4e:	2500      	movs	r5, #0
 8004a50:	f104 0619 	add.w	r6, r4, #25
 8004a54:	e7f5      	b.n	8004a42 <_printf_i+0x22e>
 8004a56:	bf00      	nop
 8004a58:	08004ce5 	.word	0x08004ce5
 8004a5c:	08004cf6 	.word	0x08004cf6

08004a60 <_sbrk_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d06      	ldr	r5, [pc, #24]	; (8004a7c <_sbrk_r+0x1c>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	f7fc fafa 	bl	8001064 <_sbrk>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_sbrk_r+0x1a>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_sbrk_r+0x1a>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	2000018c 	.word	0x2000018c

08004a80 <__sread>:
 8004a80:	b510      	push	{r4, lr}
 8004a82:	460c      	mov	r4, r1
 8004a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a88:	f000 f8a0 	bl	8004bcc <_read_r>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	bfab      	itete	ge
 8004a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a92:	89a3      	ldrhlt	r3, [r4, #12]
 8004a94:	181b      	addge	r3, r3, r0
 8004a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a9a:	bfac      	ite	ge
 8004a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a9e:	81a3      	strhlt	r3, [r4, #12]
 8004aa0:	bd10      	pop	{r4, pc}

08004aa2 <__swrite>:
 8004aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	05db      	lsls	r3, r3, #23
 8004aac:	4605      	mov	r5, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4616      	mov	r6, r2
 8004ab2:	d505      	bpl.n	8004ac0 <__swrite+0x1e>
 8004ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab8:	2302      	movs	r3, #2
 8004aba:	2200      	movs	r2, #0
 8004abc:	f000 f868 	bl	8004b90 <_lseek_r>
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aca:	81a3      	strh	r3, [r4, #12]
 8004acc:	4632      	mov	r2, r6
 8004ace:	463b      	mov	r3, r7
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad6:	f000 b817 	b.w	8004b08 <_write_r>

08004ada <__sseek>:
 8004ada:	b510      	push	{r4, lr}
 8004adc:	460c      	mov	r4, r1
 8004ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae2:	f000 f855 	bl	8004b90 <_lseek_r>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	bf15      	itete	ne
 8004aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004af6:	81a3      	strheq	r3, [r4, #12]
 8004af8:	bf18      	it	ne
 8004afa:	81a3      	strhne	r3, [r4, #12]
 8004afc:	bd10      	pop	{r4, pc}

08004afe <__sclose>:
 8004afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b02:	f000 b813 	b.w	8004b2c <_close_r>
	...

08004b08 <_write_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4d07      	ldr	r5, [pc, #28]	; (8004b28 <_write_r+0x20>)
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	4608      	mov	r0, r1
 8004b10:	4611      	mov	r1, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	602a      	str	r2, [r5, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f7fc fa53 	bl	8000fc2 <_write>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_write_r+0x1e>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_write_r+0x1e>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	2000018c 	.word	0x2000018c

08004b2c <_close_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d06      	ldr	r5, [pc, #24]	; (8004b48 <_close_r+0x1c>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fc fa5f 	bl	8000ffa <_close>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_close_r+0x1a>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_close_r+0x1a>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	2000018c 	.word	0x2000018c

08004b4c <_fstat_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d07      	ldr	r5, [pc, #28]	; (8004b6c <_fstat_r+0x20>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	f7fc fa5a 	bl	8001012 <_fstat>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	d102      	bne.n	8004b68 <_fstat_r+0x1c>
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	b103      	cbz	r3, 8004b68 <_fstat_r+0x1c>
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000018c 	.word	0x2000018c

08004b70 <_isatty_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d06      	ldr	r5, [pc, #24]	; (8004b8c <_isatty_r+0x1c>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	f7fc fa59 	bl	8001032 <_isatty>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_isatty_r+0x1a>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_isatty_r+0x1a>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	2000018c 	.word	0x2000018c

08004b90 <_lseek_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d07      	ldr	r5, [pc, #28]	; (8004bb0 <_lseek_r+0x20>)
 8004b94:	4604      	mov	r4, r0
 8004b96:	4608      	mov	r0, r1
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	602a      	str	r2, [r5, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7fc fa52 	bl	8001048 <_lseek>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_lseek_r+0x1e>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_lseek_r+0x1e>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	2000018c 	.word	0x2000018c

08004bb4 <__malloc_lock>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	; (8004bbc <__malloc_lock+0x8>)
 8004bb6:	f7ff bb55 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004bba:	bf00      	nop
 8004bbc:	20000184 	.word	0x20000184

08004bc0 <__malloc_unlock>:
 8004bc0:	4801      	ldr	r0, [pc, #4]	; (8004bc8 <__malloc_unlock+0x8>)
 8004bc2:	f7ff bb50 	b.w	8004266 <__retarget_lock_release_recursive>
 8004bc6:	bf00      	nop
 8004bc8:	20000184 	.word	0x20000184

08004bcc <_read_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d07      	ldr	r5, [pc, #28]	; (8004bec <_read_r+0x20>)
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	602a      	str	r2, [r5, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f7fc f9d4 	bl	8000f88 <_read>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_read_r+0x1e>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_read_r+0x1e>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	2000018c 	.word	0x2000018c

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
